from django.shortcuts import render, redirect
from django.http import HttpResponse
from django.views.generic import TemplateView
from accounts.mixins import GroupPermissionRequiredMixin
from django.contrib.auth.mixins import LoginRequiredMixin
from django.shortcuts import get_object_or_404
from pdfrw import PdfReader, PdfWriter, PageMerge
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib import colors
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Frame, PageBreak
from io import BytesIO
from datetime import datetime
import os
from django.conf import settings
from django.urls import reverse
from urllib.parse import urlencode
from django.contrib.staticfiles import finders
from reportlab.lib.colors import lightgrey, grey
from reportlab.platypus import Table, TableStyle
from reportlab.pdfgen import canvas
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.lib.enums import TA_CENTER, TA_JUSTIFY
from reportlab.lib.colors import Color
from pdfrw.buildxobj import pagexobj

from app_finances.models import AnuidadeAssociado, AnuidadeModel
from app_associados.models import AssociadoModel
from app_associacao.models import AssociacaoModel
from django.contrib import messages
from app_finances.models import EntradaFinanceira

from slugify import slugify

from .models import (
    DeclaracaoResidenciaModel,
    DeclaracaoFiliacaoModel,
    DeclaracaoAtividadePesqueiraModel,
    DeclaracaoHipossuficienciaModel,
    ProcuracaoJuridicaModel,
    ReciboAnuidadeModel,
    ReciboServicoExtraModel,
    CarteirinhaAssociadoModel,
    CobrancaAnuidadeModel,
    ProcuracaoAdministrativaModel,
    AutorizacaoDireitoImagemModel,
    AutorizacaoAcessoGovModel,
    DeclaracaoDesfiliacaoModel,
    DireitosDeveres,
    RetiradaDocumentos,
    )

# Deletes
# Mapeamento de automa√ß√µes para modelos
MODELO_MAP = {
    'residencia': DeclaracaoResidenciaModel,
    'filiacao': DeclaracaoFiliacaoModel,
    'atividade_pesqueira': DeclaracaoAtividadePesqueiraModel,
    'hipossuficiencia': DeclaracaoHipossuficienciaModel,
    'procuracao_juridica': ProcuracaoJuridicaModel,
    'recibos_anuidades': ReciboAnuidadeModel,
    'recibos_servicos_extra': ReciboServicoExtraModel,
    'carteirinha_apapesc': CarteirinhaAssociadoModel,
    'cobranca_anuidades': CobrancaAnuidadeModel,
    'procuracao_administrativa': ProcuracaoAdministrativaModel,
    'autorizacao_direito_imagem': AutorizacaoDireitoImagemModel,
    'autorizacao_acesso_gov': AutorizacaoAcessoGovModel,
    'declaracao_desfiliacao': DeclaracaoDesfiliacaoModel,
    'direitos_deveres':DireitosDeveres,
    'retirada_documentos': RetiradaDocumentos,

}

def delete_pdf(request, automacao, declaracao_id):
    if request.method == "POST":
        # Obter o modelo correspondente pelo tipo de automa√ß√£o
        modelo = MODELO_MAP.get(automacao)
        if not modelo:
            messages.error(request, "Tipo de automa√ß√£o inv√°lido.")
            return redirect('app_automacoes:lista_automacoes')

        # Obter a declara√ß√£o pelo ID
        declaracao = get_object_or_404(modelo, id=declaracao_id)
        
        # Excluir o arquivo do sistema de arquivos
        if declaracao.pdf_base:
            declaracao.pdf_base.delete()  # Remove o arquivo do sistema

        # Excluir o registro do banco de dados
        declaracao.delete()
        messages.success(request, f"{automacao.replace('_', ' ').capitalize()} exclu√≠do(a) com sucesso!")

    return redirect('app_automacoes:lista_automacoes')



# UPLOAD DE MODELOS PDF BASE
def upload_pdf_base(request, automacao):
    modelo_map = {
        'residencia': DeclaracaoResidenciaModel,
        'filiacao': DeclaracaoFiliacaoModel,
        'atividade_pesqueira': DeclaracaoAtividadePesqueiraModel,
        'hipossuficiencia': DeclaracaoHipossuficienciaModel,
        'procuracao_juridica': ProcuracaoJuridicaModel,
        'recibos_anuidades': ReciboAnuidadeModel,
        'recibos_servicos_extra': ReciboServicoExtraModel,
        'carteirinha_apapesc': CarteirinhaAssociadoModel,
        'cobranca_anuidades': CobrancaAnuidadeModel,
        'procuracao_administrativa': ProcuracaoAdministrativaModel,
        'autorizacao_direito_imagem': AutorizacaoDireitoImagemModel,
        'autorizacao_acesso_gov': AutorizacaoAcessoGovModel,
        'declaracao_desfiliacao': DeclaracaoDesfiliacaoModel,
        'direitos_deveres':DireitosDeveres,
        'retirada_documentos': RetiradaDocumentos,
    }
    
    modelo = modelo_map.get(automacao)
    if not modelo:
        return HttpResponse("Automa√ß√£o inv√°lida.", status=400)

    if request.method == "POST":
        pdf_base = request.FILES.get('pdf_base')
        if not pdf_base:
            return HttpResponse("Arquivo PDF n√£o enviado.", status=400)

        # Tenta pegar a primeira inst√¢ncia existente; se n√£o houver, cria nova
        instancia = modelo.objects.first()
        if not instancia:
            instancia = modelo()

        # Atribui o novo arquivo e salva
        instancia.pdf_base = pdf_base
        instancia.save()

        return redirect('app_automacoes:lista_automacoes')  # Ajuste conforme sua url de destino

    # Para requisi√ß√µes GET, exibe o template com formul√°rio de upload
    return render(request, 'app_automacoes/upload_pdf_base.html', {'automacao': automacao})




class ListaTodosArquivosView(LoginRequiredMixin, GroupPermissionRequiredMixin, TemplateView):
    template_name = 'app_automacoes/list_automacoes.html'
    group_required = ['Superuser','Admin da Associa√ß√£o']

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        
        # Adicione cada queryset com nome separado
        context['declaracoes_residencia'] = DeclaracaoResidenciaModel.objects.all()
        context['declaracoes_filiacao'] = DeclaracaoFiliacaoModel.objects.all()
        context['declaracoes_atividade_pesqueira'] = DeclaracaoAtividadePesqueiraModel.objects.all()
        context['declaracoes_hipossuficiencia'] = DeclaracaoHipossuficienciaModel.objects.all()
        context['procuracoes_procuracao_juridica'] = ProcuracaoJuridicaModel.objects.all()
        context['recibos_anuidades'] = ReciboAnuidadeModel.objects.all()
        context['recibos_servicos_extra'] = ReciboServicoExtraModel.objects.all()
        context['carteirinha_apapesc'] = CarteirinhaAssociadoModel.objects.all()
        context['cobranca_anuidades'] = CobrancaAnuidadeModel.objects.all()
        context['procuracoes_procuracao_administrativa'] = ProcuracaoAdministrativaModel.objects.all()
        context['autorizacao_direito_imagem'] = AutorizacaoDireitoImagemModel.objects.all()
        context['autorizacao_acesso_gov'] = AutorizacaoAcessoGovModel.objects.all()
        context['declaracao_desfiliacao'] = DeclaracaoDesfiliacaoModel.objects.all()
        context['direitos_deveres'] = DireitosDeveres.objects.all()
        context['retirada_documentos'] = RetiradaDocumentos.objects.all()
        
        return context


# Automa√ß√µes

# P√ÅGINA DE A√á√ïES -  AS A√á√ïES GERAR EST√ÉO V√çNCULADAS NESSA P√ÅGINA
def pagina_acoes(request, associado_id=None, entrada_id=None):
    pdf_url = request.GET.get('pdf_url')
    tipo_recibo = request.GET.get('tipo', 'documento')  # üëâ valor padr√£o agora √© "documento"

    associado = None
    entrada = None
    extra_associado = None

    if associado_id:
        associado = get_object_or_404(AssociadoModel, pk=associado_id)

    if entrada_id:
        entrada = get_object_or_404(EntradaFinanceira, pk=entrada_id)
        if hasattr(entrada, 'entrada_servico_extra'):
            extra_associado = entrada.entrada_servico_extra.extra_associado

    associacao = AssociacaoModel.objects.first()
    if not associacao:
        return HttpResponse("Informa√ß√µes da APAPESC n√£o est√£o configuradas.", status=404)

    return render(request, 'app_automacoes/pagina_acoes.html', {
        'pdf_url': pdf_url,
        'tipo_recibo': tipo_recibo,
        'associado': associado,
        'entrada': entrada,
        'extra_associado': extra_associado,
        'associacao': associacao,
    })

    
#=======================================================================================================

# GERAR DECLARA√á√ÉO DE FILIADO
def gerar_declaracao_filiado(request, associado_id):
    associado = AssociadoModel.objects.get(id=associado_id)
    associacao = associado.associacao

    # Caminho para o PDF de template
    template_path = os.path.join(settings.MEDIA_ROOT, 'pdf/declaracao_filiacao.pdf')
    if not os.path.exists(template_path):
        return HttpResponse("O PDF base para a Declara√ß√£o de Filia√ß√£o n√£o foi encontrado.", status=404)

    template_pdf = PdfReader(template_path)
    template_page = template_pdf.pages[0]  # Primeira p√°gina como template

    # Buffer para gerar o PDF dinamicamente
    buffer = BytesIO()

    # Estilos personalizados
    styles = getSampleStyleSheet()
    style_title = ParagraphStyle(
        'Title',
            parent=styles['Title'],
            fontName='Times-Bold',
            fontSize=11,
            alignment=2,
            leading=32,  # Define a altura da linha
            spaceBefore=100,  # Espa√ßamento antes do par√°grafo
            textColor=lightgrey,
    )

    style_normal = ParagraphStyle(
        'Normal',
        parent=styles['Normal'],
        fontName='Times-Roman',
        fontSize=12,
        leading=22,  # Espa√ßamento entre as linhas
        alignment=4
    )

    style_veracidade = ParagraphStyle(
        'Normal',
        parent=styles['Normal'],
        fontName='Times-Roman',
        fontSize=12,
        leading=18,  # Espa√ßamento entre as linhas
        alignment=4,
        leftIndent=50,  # Indenta o texto para a direita
    )

    style_data = ParagraphStyle(
        'Normal',
        parent=styles['Normal'],
        fontName='Times-Roman',
        fontSize=12,
        leading=18,  # Espa√ßamento entre as linhas
        spaceBefore=10,
        alignment=4
    )

    style_assinatura = ParagraphStyle(
        'Normal',
        parent=styles['Normal'],
        fontName='Times-Roman',
        fontSize=12,
        leading=18,  # Espa√ßamento entre as linhas
        alignment=4
    )
    style_presidente = ParagraphStyle(
        'Title',
            parent=styles['Title'],
            fontName='Times-Bold',
            fontSize=12,
            alignment=2,
            leading=32,  # Define a altura da linha
            spaceBefore=100,  # Espa√ßamento antes do par√°grafo
            textColor=grey,
    )
    nome_presidente = ( f"{associacao.presidente.user.get_full_name()}")

    # Data atual
    data_atual = datetime.now().strftime('%d/%m/%Y')

    # Texto da declara√ß√£o
    texto = (
        f"A {associacao.nome_fantasia}, {associacao.razao_social}, "
        f"inscrita no CNPJ sob o n¬∫ {associacao.cnpj}, com sede √† {associacao.logradouro}, n¬∞ {associacao.numero}, "
        f"{associacao.complemento}, {associacao.bairro}, {associacao.municipio} - {associacao.uf}, CEP: {associacao.cep}, "
        f"declara para os devidos fins que <strong>{associado.user.get_full_name()},</strong> inscrito no CPF sob o n¬∫ {associado.cpf}, "
        f"e no RG n¬∫ {associado.rg_numero} - {associado.rg_orgao}, √© filiado(a) a esta entidade desde, "
        f"{associado.data_filiacao.strftime('%d/%m/%Y')}."
    )

    local_data = f"{associacao.municipio}, {data_atual}."

    assinatura = (
        '_________________________________________________________________________<br/>'
        f"{associacao.administrador.user.get_full_name().upper()}<br/>"
        f"PROCURADOR(A) {associacao.nome_fantasia}<br/>"
        f"{associacao.razao_social}"
        f"<br/>Presidente: {associacao.presidente.user.get_full_name().upper()}"
    )

    declaracao_veracidade = (
        "<strong>Declaro sob as penas de lei (Art. 299 do C√≥digo Penal) a veracidade das informa√ß√µes "
        "aqui prestadas para emiss√£o desta declara√ß√£o, ficando sob minha responsabilidade as "
        "informa√ß√µes nelas contidas e eventuais informa√ß√µes n√£o declaradas.</strong>"
    )

    # Cria√ß√£o do Frame para controlar margens e posicionamento
    pdf_canvas = Frame(x1=75, y1=75, width=450, height=700, showBoundary=1)

    # Adiciona o t√≠tulo, texto, local e assinatura ao Frame
    elements = [
        Paragraph(nome_presidente, style_presidente),
        Spacer(1, 90),
                
        Paragraph(texto, style_normal),
        Spacer(1, 14),

        Paragraph(declaracao_veracidade, style_veracidade),
        Spacer(1, 18),

        Paragraph(local_data, style_data),
        Spacer(1, 24),

        Paragraph(assinatura, style_assinatura),
        Spacer(1, 16),

    ]

    # Gerando o conte√∫do din√¢mico
    doc = SimpleDocTemplate(buffer, pagesize=A4, rightMargin=68, leftMargin=68, topMargin=172, bottomMargin=50)
    doc.build(elements)

    # Mesclando o conte√∫do din√¢mico com o template
    buffer.seek(0)
    overlay_pdf = PdfReader(buffer)
    overlay_page = overlay_pdf.pages[0]

    merger = PageMerge(template_page)
    merger.add(overlay_page).render()

    # Salvando o PDF mesclado no sistema de arquivos
    pdf_name = f"declaracao_filiado_{associado_id}_{associado.user.get_full_name().replace(' ', '_')}.pdf"
    pdf_path = os.path.join(settings.MEDIA_ROOT, 'documentos', pdf_name)
    os.makedirs(os.path.dirname(pdf_path), exist_ok=True)

    PdfWriter(pdf_path, trailer=template_pdf).write()

    # Redirecionando para a p√°gina de a√ß√µes com o URL do PDF
    pdf_url = f"{settings.MEDIA_URL}documentos/{pdf_name}"
    query_string = urlencode({'pdf_url': pdf_url})
    redirect_url = f"{reverse('app_automacoes:pagina_acoes', args=[associado.id])}?{query_string}"
    return redirect(redirect_url)
#=======================================================================================================


# GERAR DECLARA√á√ÉO DE ATIVIDADE PESQUEIRA
def gerar_declaracao_atividade_pesqueira(request, associado_id):
    associado = AssociadoModel.objects.get(id=associado_id)
    associacao = associado.associacao
    
    # Caminho para o PDF de template
    template_path = os.path.join(settings.MEDIA_ROOT, 'pdf/declaracao_atividade_pesqueira.pdf')
    if not os.path.exists(template_path):
        return HttpResponse("O PDF base para a Declara√ß√£o de Atv. Pesqueira n√£o foi encontrado.", status=404)

    template_pdf = PdfReader(template_path)
    template_page = template_pdf.pages[0]  # Primeira p√°gina como template

    # Buffer para gerar o PDF dinamicamente
    buffer = BytesIO()

    # Estilos personalizados
    styles = getSampleStyleSheet()
    style_title = ParagraphStyle(
        'Title',
        parent=styles['Title'],
        fontName='Times-Bold',
        fontSize=11,
        alignment=2,
        leading=32,  # Espa√ßamento entre as linhas do t√≠tulo
        spaceBefore=100,  # Espa√ßamento antes do t√≠tulo
        textColor=colors.grey,
    )

    style_normal = ParagraphStyle(
        'Normal',
        parent=styles['Normal'],
        fontName='Times-Roman',
        fontSize=12,
        leading=15,  # Espa√ßamento entre as linhas do texto
        alignment=4,  # Justificado
    )
    style_presidente = ParagraphStyle(
        'Title',
            parent=styles['Title'],
            fontName='Times-Bold',
            fontSize=12,
            alignment=2,
            leading=32,  # Define a altura da linha
            spaceBefore=100,  # Espa√ßamento antes do par√°grafo
            textColor=grey,
    )
    nome_presidente = ( f"{associacao.presidente.user.get_full_name()}")
    # Data atual
    data_atual = datetime.now().strftime('%d/%m/%Y')

    # Texto inicial da declara√ß√£o
    texto = (
        f"A {associacao.razao_social}, "
        f"inscrita no CNPJ sob n¬∞ {associacao.cnpj}, com sede na {associacao.logradouro}, n¬∞ {associacao.numero}, "
        f"{associacao.complemento}, {associacao.bairro}, {associacao.municipio} - {associacao.uf}, CEP: {associacao.cep}, "
        f"representada neste ato por seu presidente, {associacao.presidente.user.get_full_name()}, "
        f"{associacao.presidente.profissao}, {associacao.presidente.estado_civil}, portador " 
        f"da carteira de identidade n¬∞ {associacao.presidente.rg_numero} - {associacao.presidente.rg_orgao}, inscrito no CPF " 
        f"sob n¬∞ {associacao.presidente.cpf}, Residente e domiciliado √† {associacao.presidente.logradouro}, " 
        f"n¬∞ {associacao.presidente.numero}, {associacao.presidente.complemento}, {associacao.presidente.bairro}, " 
        f"{associacao.presidente.municipio}, {associacao.presidente.uf}, CEP {associacao.presidente.cep}, " 
        f"declara que o Sr(a). <strong>{associado.user.get_full_name()},</strong> "
        f"inscrito no CPF sob o n¬∫ <strong>{associado.cpf}</strong>, √© pescador registrado no Minist√©rio da Agricultura, "
        f"Pesca e Abastecimento (MAPA), sob o n¬∫ <strong>{associado.rgp}</strong>, √© residente e domiciliado(a) na {associado.logradouro}, "
        f"n¬∫ {associado.numero}, {associado.complemento}, {associado.bairro}, {associado.municipio}, {associado.uf}, CEP: {associado.cep}, "
        f"dedica-se √† pesca artesanal profissional, com meios de produ√ß√£o pr√≥prios ou em regime de parceria com outros "
        f"pescadores artesanais e que sua renda depende de sua produ√ß√£o."
    )

    local_data = f"FLORIAN√ìPOLIS, {data_atual}."

    # Dados para a tabela
    dados_tabela = [
        ["ESP√âCIE", "QUANTIDADE M√âDIA ANUAL (Kg)"],  # Cabe√ßalho da tabela
        [associado.especie1, associado.quantidade1],
        [associado.especie2, associado.quantidade2],
        [associado.especie3, associado.quantidade3],
        [associado.especie4, associado.quantidade4],
        [associado.especie5, associado.quantidade5],
    ]

    # Cria√ß√£o da tabela
    tabela = Table(dados_tabela, colWidths=[200, 200])
    tabela.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Times-Bold'),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
    ]))

    assinatura = (
        "Por ser verdade, firmo e dou F√©.<br/><br/>"
        "__________________________________________________________________________<br/>"
        f"Jur√≠dico {associacao.administrador.user.get_full_name()} | {associacao.administrador.oab} <br/>"        
        f"Presidente da Associa√ß√£o: {associacao.presidente.user.get_full_name()}"

    )

    # Elementos para o PDF
    elements = [
        Paragraph(nome_presidente, style_presidente),
        Spacer(1, 100),
        Paragraph(texto, style_normal),
        Spacer(1, 17),
        tabela,  # Adicionando a tabela ao PDF
        Spacer(1, 15),
        Paragraph(local_data, style_normal),
        Spacer(1, 10),
        Paragraph(assinatura, style_normal),
    ]

    # Gerando o conte√∫do din√¢mico
    doc = SimpleDocTemplate(buffer, pagesize=A4, rightMargin=50, leftMargin=50, topMargin=172, bottomMargin=50)
    doc.build(elements)

    # Mesclando o conte√∫do din√¢mico com o template
    buffer.seek(0)
    overlay_pdf = PdfReader(buffer)
    overlay_page = overlay_pdf.pages[0]

    merger = PageMerge(template_page)
    merger.add(overlay_page).render()

    # Salvando o PDF no disco
    pdf_name = f"declaracao_atividade_pesqueira_{associado_id}_{associado.user.get_full_name().replace(' ', '_')}.pdf"
    pdf_path = os.path.join(settings.MEDIA_ROOT, 'documentos', pdf_name)
    os.makedirs(os.path.dirname(pdf_path), exist_ok=True)

    PdfWriter(pdf_path, trailer=template_pdf).write()

    # Redirecionando para a p√°gina de a√ß√µes
    pdf_url = f"{settings.MEDIA_URL}documentos/{pdf_name}"
    query_string = urlencode({'pdf_url': pdf_url})
    redirect_url = f"{reverse('app_automacoes:pagina_acoes', args=[associado.id])}?{query_string}"
    return redirect(redirect_url)


#=======================================================================================================


# GERAR DECLARA√á√ÉO DE RESID√äNCIA
def gerar_declaracao_residencia(request, associado_id):
    associado = AssociadoModel.objects.get(id=associado_id)
    associacao = associado.associacao
        
    # Caminho para o PDF de template
    template_path = os.path.join(settings.MEDIA_ROOT, 'pdf/declaracao_residencia.pdf')
    if not os.path.exists(template_path):
        return HttpResponse("O PDF base para a Declara√ß√£o de Resid√™ncia n√£o foi encontrado.", status=404)

    template_pdf = PdfReader(template_path)
    template_page = template_pdf.pages[0]  # Primeira p√°gina como template

    # Buffer em mem√≥ria para o conte√∫do din√¢mico
    buffer = BytesIO()

    # Definindo estilos personalizados
    styles = getSampleStyleSheet()
    style_title = ParagraphStyle(
        'Title',
        parent=styles['Title'],
        fontName='Times-Bold',
        fontSize=16,
        alignment=1,  # Centralizado
        leading=32,  # Espa√ßamento entre as linhas do t√≠tulo
        spaceBefore=100,  # Espa√ßamento antes do t√≠tulo
        textColor=colors.grey,
    )
    style_normal = ParagraphStyle(
        'Normal',
        parent=styles['Normal'],
        fontName='Times-Roman',
        fontSize=12,
        leading=28,  # Espa√ßamento entre linhas
        alignment=4,  # Justificado
    )
    style_assinatura = ParagraphStyle(
        'Normal',
        parent=styles['Normal'],
        fontName='Times-Roman',
        fontSize=12,
        leading=28,  # Espa√ßamento entre linhas
        alignment=1,  # Centralizado
    )
    style_data = ParagraphStyle(
        'Normal',
        parent=styles['Normal'],
        fontName='Times-Roman',
        fontSize=12,
        leading=28,  # Espa√ßamento entre linhas
        alignment=0,  # Esquerda
        spaceBefore=20,  # Espa√ßamento antes do t√≠tulo
    )
    # Data atual
    data_atual = datetime.now().strftime('%d/%m/%Y')

    # Texto da declara√ß√£o
    texto = (
        f"Eu, <strong>{associado.user.get_full_name()}</strong>, inscrito no CPF n¬∫ {associado.cpf}, na falta de documentos "
        f"para comprova√ß√£o de resid√™ncia, em conformidade com o disposto na Lei 7.115, de 29 de "
        f"agosto de 1983, DECLARO para os devidos fins, sob penas da Lei, que RESIDO no endere√ßo: "
        f"<strong>{associado.logradouro}, n¬∫ {associado.numero}, {associado.complemento},"
        f" {associado.bairro}, {associado.municipio} - {associado.uf}, CEP: {associado.cep}.</strong>"
    )

    # Declara√ß√£o de veracidade
    declaracao_veracidade = (
        "Declaro sob as penas da lei (Art. 299 do C√≥digo Penal) a veracidade das informa√ß√µes "
        "aqui prestadas para emiss√£o desta declara√ß√£o, ficando sob minha responsabilidade as "
        "informa√ß√µes nelas contidas e eventuais informa√ß√µes n√£o declaradas."
    )

    # Local e data
    local_data = f"FLORIAN√ìPOLIS, {data_atual}."

    # Assinatura
    assinatura = (
        "____________________________________________________________________<br/>"
        f"{associado.user.get_full_name()}  - CPF: {associado.cpf}<br/>"
    )

    # Elementos do PDF na ordem correta
    elements = [
        Paragraph("DECLARA√á√ÉO DE RESID√äNCIA", style_title),
        Spacer(1, 20),
        Paragraph(texto, style_normal),
        Spacer(1, 10),
        Paragraph(declaracao_veracidade, style_normal),
        Paragraph(local_data, style_data),
        Spacer(1, 24),
        Paragraph(assinatura, style_assinatura),
        Spacer(1, 26),
    ]

    # Cria√ß√£o do documento PDF
    doc = SimpleDocTemplate(
        buffer,
        pagesize=A4,
        rightMargin=85,
        leftMargin=85,
        topMargin=160,
        bottomMargin=40,
    )

    # Gerar o conte√∫do do PDF
    doc.build(elements)

    # Mesclar o conte√∫do din√¢mico com o template PDF
    buffer.seek(0)
    overlay_pdf = PdfReader(buffer)
    overlay_page = overlay_pdf.pages[0]

    merger = PageMerge(template_page)
    merger.add(overlay_page).render()

    # Salvar o PDF em disco
    pdf_name = f"declaracao_residencia_{associado.user.get_full_name().replace(' ', '_')}.pdf"
    pdf_path = os.path.join(settings.MEDIA_ROOT, 'documentos', pdf_name)
    os.makedirs(os.path.dirname(pdf_path), exist_ok=True)
    PdfWriter(pdf_path, trailer=template_pdf).write()

    # Construir o URL para o PDF
    pdf_url = f"{settings.MEDIA_URL}documentos/{pdf_name}"

    # Redirecionar para a p√°gina de a√ß√µes
    query_string = urlencode({'pdf_url': pdf_url})
    redirect_url = f"{reverse('app_automacoes:pagina_acoes', kwargs={'associado_id': associado.id})}?{query_string}"
    return redirect(redirect_url)
# =======================================================================================================


# DECLARA√á√ÉO DE HIPOSSUFICI√äNCIA
def gerar_declaracao_hipo(request, associado_id):
    associado = AssociadoModel.objects.get(id=associado_id)
    associacao = associado.associacao
    
    # Caminho para o PDF de template
    template_path = os.path.join(settings.MEDIA_ROOT, 'pdf/declaracao_hipossuficiencia.pdf')
    if not os.path.exists(template_path):
        return HttpResponse("O PDF base para a Declara√ß√£o de Atv. Pesqueira n√£o foi encontrado.", status=404)

    template_pdf = PdfReader(template_path)
    template_page = template_pdf.pages[0]  # Primeira p√°gina como template

    # Buffer em mem√≥ria para o conte√∫do din√¢mico
    buffer = BytesIO()

    # Definindo estilos personalizados
    styles = getSampleStyleSheet()
    style_title = ParagraphStyle(
        'Title',
        parent=styles['Title'],
        fontName='Times-Bold',
        fontSize=16,
        alignment=1,  # Centralizado
        leading=32,  # Espa√ßamento entre as linhas do t√≠tulo
        spaceBefore=100,  # Espa√ßamento antes do t√≠tulo
        textColor=colors.grey,
    )
    style_normal = ParagraphStyle(
        'Normal',
        parent=styles['Normal'],
        fontName='Times-Roman',
        fontSize=12,
        leading=22,  # Espa√ßamento entre linhas
        alignment=4,  # Justificado
    )
    style_assinatura = ParagraphStyle(
        'Normal',
        parent=styles['Normal'],
        fontName='Times-Roman',
        fontSize=12,
        leading=28,  # Espa√ßamento entre linhas
        alignment=1,  # Centralizado
    )
    style_data = ParagraphStyle(
        'Normal',
        parent=styles['Normal'],
        fontName='Times-Roman',
        fontSize=12,
        leading=28,  # Espa√ßamento entre linhas
        alignment=0,  # Esquerda
        spaceBefore=50,  # Espa√ßamento antes do t√≠tulo
    )
    style_veracidade = ParagraphStyle(
        'Normal',
        parent=styles['Normal'],
        fontName='Times-Roman',
        fontSize=12,
        leading=18,  # Espa√ßamento entre as linhas
        alignment=4,
        leftIndent=50,  # Indenta o texto para a direita
    )

    # Data atual
    data_atual = datetime.now().strftime('%d/%m/%Y')

    # Texto da declara√ß√£o
    texto = (
        f"Eu, <strong>{associado.user.get_full_name()}</strong>, profiss√£o {associado.profissao}, "
        f"estado civil {associado.estado_civil}, inscrito(a) no CPF n¬∫ {associado.cpf}, e RG: n¬∫{associado.rg_numero}, "
        f"com domic√≠lio e resid√™ncia estabelecido √† {associado.logradouro}, n¬∫ {associado.numero}, {associado.complemento}, {associado.bairro}, "
        f"{associado.municipio} - {associado.uf} {associado.cep}. <strong>DECLARO</strong>, para todos os fins de "
        f"direito e sob as penas da lei, que n√£o tenho condi√ß√µes de arcar com as despesas inerentes ao presente "
        f"processo, sem preju√≠zo do meu sustento e de minha fam√≠lia, necessitando, portanto, da "
        f"<strong>GRATUIDADE DA JUSTI√áA</strong>, nos termos do art. 98 e seguintes da Lei 13.105/2015 "
        f"(C√≥digo de Processo Civil). Requeiro, ainda, que o benef√≠cio abarque todos os atos do processo."
    )

    # Declara√ß√£o de veracidade
    declaracao_veracidade = (
        "<strong>Declaro sob as penas da lei (Art. 299 do C√≥digo Penal) a veracidade das informa√ß√µes "
        "aqui prestadas para emiss√£o desta declara√ß√£o, ficando sob minha responsabilidade as "
        "informa√ß√µes nelas contidas e eventuais informa√ß√µes n√£o declaradas.</strong>"
    )

    # Local e data
    local_data = f"{associado.reparticao.municipio_sede}, {data_atual}."

    # Assinatura
    assinatura = (
        "____________________________________________________________________<br/>"
        f"{associado.user.get_full_name()} - CPF: {associado.cpf}<br/>"
    )

    # Elementos do PDF na ordem correta
    elements = [
        Paragraph("DECLARA√á√ÉO DE HIPOSSUFICI√äNCIA", style_title),
        Spacer(1, 20),
        Paragraph(texto, style_normal),
        Spacer(1, 10),
        Paragraph(declaracao_veracidade, style_veracidade),
        Paragraph(local_data, style_data),
        Spacer(1, 14),
        Paragraph(assinatura, style_assinatura),
        Spacer(1, 26),
    ]

    # Cria√ß√£o do documento PDF
    doc = SimpleDocTemplate(
        buffer,
        pagesize=A4,
        rightMargin=85,
        leftMargin=85,
        topMargin=160,
        bottomMargin=40
    )

    # Gerar o conte√∫do do PDF
    doc.build(elements)

    # Mesclar o conte√∫do din√¢mico com o template PDF
    buffer.seek(0)
    overlay_pdf = PdfReader(buffer)
    overlay_page = overlay_pdf.pages[0]

    merger = PageMerge(template_page)
    merger.add(overlay_page).render()

    # Salvar o PDF no disco
    pdf_name = f"declaracao_hipo_{associado.user.get_full_name().replace(' ', '_')}.pdf"
    pdf_path = os.path.join(settings.MEDIA_ROOT, 'documentos', pdf_name)
    os.makedirs(os.path.dirname(pdf_path), exist_ok=True)
    PdfWriter(pdf_path, trailer=template_pdf).write()

    # Construir o URL do PDF
    pdf_url = f"{settings.MEDIA_URL}documentos/{pdf_name}"

    # Redirecionar para a p√°gina de a√ß√µes com o URL do PDF
    query_string = urlencode({'pdf_url': pdf_url})
    redirect_url = f"{reverse('app_automacoes:pagina_acoes', kwargs={'associado_id': associado.id})}?{query_string}"
    return redirect(redirect_url)


# GERAR PROCURA√á√ÉO AD JUDICIA
def gerar_procuracao_juridica(request, associado_id):
    associado = AssociadoModel.objects.get(id=associado_id)

    # Caminho para o PDF de template
    template_path = os.path.join(settings.MEDIA_ROOT, 'pdf/procuracao_juridica.pdf')
    if not os.path.exists(template_path):
        return HttpResponse("O PDF base para a Procura√ß√£o Jur√≠dica n√£o foi encontrado.", status=404)

    template_pdf = PdfReader(template_path)

    # Buffer em mem√≥ria para o conte√∫do din√¢mico
    buffer = BytesIO()

    # Definindo estilos personalizados
    styles = getSampleStyleSheet()
    style_title = ParagraphStyle(
        'Title',
        parent=styles['Title'],
        fontName='Times-Bold',
        fontSize=17,
        alignment=1,  # Centralizado
        leading=32,  # Espa√ßamento entre as linhas do t√≠tulo
        spaceBefore=100,  # Espa√ßamento antes do t√≠tulo
    )
    style_normal = ParagraphStyle(
        'Normal',
        parent=styles['Normal'],
        fontName='Times-Roman',
        fontSize=12,
        leading=14,  # Espa√ßamento entre linhas
        alignment=4,  # Justificado
    )
    style_assinatura = ParagraphStyle(
        'Normal',
        parent=styles['Normal'],
        fontName='Times-Roman',
        fontSize=12,
        leading=14,  # Espa√ßamento entre linhas
        alignment=1,  # Justificado
    )
    # Data atual
    data_atual = datetime.now().strftime('%d/%m/%Y')

    # Texto da declara√ß√£o
    texto1 = (
        f"<strong>OUTORGANTE(S)</strong>: <strong>{associado.user.get_full_name()}</strong>, brasileira, "
        f"profiss√£o, {associado.profissao}, estado civil, {associado.estado_civil}, CPF n¬∫ {associado.cpf}, "
        f"RG n¬∫ {associado.rg_numero}, com resid√™ncia e domic√≠lio estabelecido √° {associado.logradouro}, "
        f"n¬∫ {associado.numero}, {associado.complemento}, {associado.bairro}, {associado.municipio} -"
        f" {associado.uf} {associado.cep}. "
        f"<br /><br /><strong>OUTORGADOS</strong>: <strong>CRISTIANI JORDANI DOS SANTOS RAMOS</strong>, "
        f"brasileira, casada, advogada, inscri√ß√£o na OAB/SC sob o n√∫mero 51.410, inscrita no CPF 853.801.219-34, "
        f"<strong>SAMARA IZILDA CORREA DOS SANTOS</strong>,  brasileira, divorciada,"
        f"advogada, inscri√ß√£o na OAB/SC sob o n√∫mero 51.380, inscrita no CPF 027.034.419-59, integrantes do "
        f"escrit√≥rio JORDANI & SANTOS Advogados Associados."
    )
    texto2 =(
        f"<strong>PODERES:</strong> Nos termos do art. 105 do CPC para o foro em geral, conferindo-lhe os mais amplos"
        f" e ilimitados poderes inclusive os da cl√°usula ‚Äúad judicia et extra‚Äù, para, onde com esta se apresentar, "
        f"em conjunto ou separadamente, independente de ordem de nomea√ß√£o, propor a√ß√µes e contest√°-las, receber "
        f"cita√ß√µes, notifica√ß√µes e intima√ß√µes, apresentar justifica√ß√µes, variar de a√ß√µes e pedidos, notificar, "
        f"interpelar, protestar, discordar, transigir e desistir, receber a quantia e dar quita√ß√£o, arrematar "
        f"ou adjudicar em qualquer pra√ßa ou leil√£o, reter dos valores finais auferidos na demanda,  honor√°rios "
        f"contratuais de 30% e tamb√©m o valor equivalente a tr√™s benef√≠cios estabelecidos em senten√ßa, prestar "
        f"compromissos de inventariante, oferecer as primeiras e √∫ltimas declara√ß√µes, interpor quaisquer recursos, "
        f"requerer, assinar, praticar, perante qualquer reparti√ß√£o p√∫blica, entidades aut√°rquicas e ou parestatal, "
        f"Ju√≠zo, Inst√¢ncia ou Tribunal, tudo o que julgar conveniente ou necess√°rio ao bom e fiel desempenho deste "
        f"mandato, que poder√° ser substabelecido, no todo ou em parte, a quem melhor lhe convier, com ou sem reserva "
        f"de poderes, EM ESPECIAL PARA PROPOR A√á√ÉO JUDICIAL DE APOSENTADORIA BEM COMO, POR FOR√áA DO ARTIGO 661 DO "
        f"C√≥digo Civil, PRESTAR OU ASSINAR DECLARA√á√ÉO DE ISEN√á√ÉO DO IMPOSTO DE RENDA."
    )

    # Local e data
    local_data = f"{associado.reparticao.municipio_sede}, {data_atual}."
    assinatura = (
        "____________________________________________________________________<br/>"
        f"<strong>{associado.user.get_full_name()}</strong><br/>"
        f"CPF: {associado.cpf}<br/>"
    )

    # Elementos do PDF
    elements = [
        Paragraph("PROCURA√á√ÉO AD JUDICIA", style_title),
        Spacer(1, 10),
        Paragraph(texto1, style_normal),
        Spacer(1, 10),
        Paragraph(texto2, style_normal),
        Spacer(1, 10),
        Paragraph(local_data, style_normal),
        Spacer(1, 24),
        Paragraph(assinatura, style_assinatura),
    ]

    # Criando o documento PDF
    doc = SimpleDocTemplate(
        buffer,
        pagesize=A4,
        rightMargin=85,
        leftMargin=85,
        topMargin=140,
        bottomMargin=40,
    )

    doc.build(elements)

    # Mesclando o conte√∫do din√¢mico com o template
    buffer.seek(0)
    overlay_pdf = PdfReader(buffer)

    # **Ajuste Importante:**
    # O n√∫mero de p√°ginas do template e o overlay_pdf deve ser gerenciado com cuidado.
    for index, template_page in enumerate(template_pdf.pages):
        if index < len(overlay_pdf.pages):
            overlay_page = overlay_pdf.pages[index]
            PageMerge(template_page).add(overlay_page).render()

    # Salvando o PDF final
    pdf_name = f"procuracao_juridica_{associado.user.get_full_name().replace(' ', '_')}.pdf"
    pdf_path = os.path.join(settings.MEDIA_ROOT, 'documentos', pdf_name)
    os.makedirs(os.path.dirname(pdf_path), exist_ok=True)
    PdfWriter(pdf_path, trailer=template_pdf).write()

    # Preparando o redirecionamento
    pdf_url = f"{settings.MEDIA_URL}documentos/{pdf_name}"
    return redirect(f"{reverse('app_automacoes:pagina_acoes', args=[associado.id])}?pdf_url={pdf_url}")
# ======================================================================================================

# GERAR RECIBO DE ANUIDADE
from decimal import Decimal
from django.db.models import Sum

def gerar_recibo_anuidade(request, anuidade_assoc_id):
    anuidade_assoc = get_object_or_404(AnuidadeAssociado, id=anuidade_assoc_id)
    associado = anuidade_assoc.associado
    associacao = associado.associacao

    # ‚ö†Ô∏è Verifica se existe pagamento ou desconto suficiente
    total_pago = anuidade_assoc.pagamentos.aggregate(total=Sum('valor'))['total'] or Decimal('0.00')
    total_desconto = anuidade_assoc.descontos.aggregate(total=Sum('valor_desconto'))['total'] or Decimal('0.00')
    valor_anuidade = anuidade_assoc.anuidade.valor_anuidade
    soma_total = total_pago + total_desconto

    if soma_total < valor_anuidade:
        return HttpResponse("Ainda h√° saldo devedor. O recibo ser√° gerado apenas quando o total for quitado (via pagamento ou desconto).", status=400)

    # ‚ö†Ô∏è Verifica se o template existe
    template_path = os.path.join(settings.MEDIA_ROOT, 'pdf/recibo_anuidade.pdf')
    if not os.path.exists(template_path):
        return HttpResponse("O PDF base para o Recibo de Anuidade n√£o foi encontrado.", status=404)

    template_pdf = PdfReader(template_path)

    # Dados de pagamento
    ultimo_pagamento = anuidade_assoc.pagamentos.order_by('-data_pagamento').first()
    data_pagamento = (
        ultimo_pagamento.data_pagamento.strftime('%d/%m/%Y')
        if ultimo_pagamento else datetime.now().strftime('%d/%m/%Y')
    )
    data_hoje = datetime.now().strftime('%d/%m/%Y')

    # Constru√ß√£o do texto din√¢mico
    texto = (
        f"Recebemos de <strong>{associado.user.get_full_name()}</strong>, "
        f"inscrito no CPF sob o n¬∫ <strong>{associado.cpf}</strong>, "
        f"a import√¢ncia de <strong>R$ {total_pago:.2f}</strong> referente ao pagamento da anuidade do exerc√≠cio de <strong>{anuidade_assoc.anuidade.ano}</strong>."
    )

    if total_desconto > 0:
        texto += f" Um desconto de <strong>R$ {total_desconto:.2f}</strong> foi concedido, totalizando o valor integral de <strong>R$ {valor_anuidade:.2f}</strong>."

    texto += (
        f"<br/><br/>Este pagamento foi efetuado √† <strong>{associacao.razao_social}</strong>, "
        f"inscrita no CNPJ sob o n¬∫ {associacao.cnpj}, com sede na {associacao.logradouro}, n¬∫ {associacao.numero}, "
        f"{associacao.bairro}, {associacao.municipio or 'Munic√≠pio n√£o informado'}/{associacao.uf}. "
        f"<br/><br/><i>Agradecemos por sua confian√ßa. A contribui√ß√£o anual √© essencial para a manuten√ß√£o das atividades da associa√ß√£o, refletindo diretamente no apoio prestado √† categoria.</i>"
    )

    assinatura = (
        f"{associacao.presidente.user.get_full_name()}<br/>"
        f"Presidente da Associa√ß√£o<br/>"
        f"Forte abra√ßo!"
    )

    municipio = associacao.municipio.upper() if associacao.municipio else "CIDADE N√ÉO DEFINIDA"
    local_data = f"{municipio}, {data_hoje}."

    # PDF Elements
    styles = getSampleStyleSheet()
    style_title = ParagraphStyle('Title', parent=styles['Title'], fontName='Times-Bold', fontSize=14, alignment=TA_CENTER, leading=28, spaceBefore=40)
    style_normal = ParagraphStyle('Normal', parent=styles['Normal'], fontName='Times-Roman', fontSize=12, leading=18, alignment=TA_JUSTIFY)
    style_assinatura = ParagraphStyle('Assinatura', parent=styles['Normal'], fontName='Times-Roman', fontSize=12, leading=18, alignment=TA_CENTER)
    style_presidente = ParagraphStyle('Presidente', parent=styles['Normal'], fontName='Times-Bold', fontSize=12, alignment=2, textColor=colors.grey)

    buffer = BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4, rightMargin=50, leftMargin=50, topMargin=120, bottomMargin=50)
    elements = [
        Spacer(1, 50),
        Paragraph(associacao.presidente.user.get_full_name(), style_presidente),
        Spacer(1, 35),
        Paragraph("RECIBO DE PAGAMENTO DE ANUIDADE", style_title),
        Spacer(1, 20),
        Paragraph(texto, style_normal),
        Spacer(1, 24),
        Paragraph(local_data, style_normal),
        Spacer(1, 20),
        Paragraph(assinatura, style_assinatura),
    ]
    doc.build(elements)
    buffer.seek(0)

    overlay_pdf = PdfReader(buffer)
    for index, template_page in enumerate(template_pdf.pages):
        if index < len(overlay_pdf.pages):
            overlay_page = overlay_pdf.pages[index]
            PageMerge(template_page).add(overlay_page).render()

    # Gera√ß√£o do arquivo
    nome_associado = slugify(associado.user.get_full_name())
    pdf_name = f"recibo_anuidade_{associado.id}_{nome_associado}_{anuidade_assoc.anuidade.ano}.pdf"
    pdf_path = os.path.join(settings.MEDIA_ROOT, 'documentos', pdf_name)
    os.makedirs(os.path.dirname(pdf_path), exist_ok=True)
    PdfWriter(pdf_path, trailer=template_pdf).write()

    # Redireciona com o link do PDF
    pdf_url = f"{settings.MEDIA_URL}documentos/{pdf_name}"
    query_string = urlencode({'pdf_url': pdf_url})
    return redirect(f"{reverse('app_automacoes:pagina_acoes', args=[associado.id])}?{query_string}&tipo=anuidade")

    # =======================================================================================================
# GERAR COBRAN√áA NUIDADE APAPESC ASSOCIADO
# app_automacoes/views.py
from decimal import Decimal

def gerar_cobranca_anuidade(request, anuidade_assoc_id):
    anuidade_assoc = get_object_or_404(AnuidadeAssociado, id=anuidade_assoc_id)
    associado = anuidade_assoc.associado
    associacao = associado.associacao

    # Caminho para o PDF base
    template_path = os.path.join(settings.MEDIA_ROOT, 'pdf/cobranca_anuidades.pdf')
    if not os.path.exists(template_path):
        return HttpResponse("O PDF base para a Cobran√ßa de Anuidade n√£o foi encontrado.", status=404)

    template_pdf = PdfReader(template_path)
    buffer = BytesIO()

    hoje = datetime.now()
    data_hoje = hoje.strftime('%d/%m/%Y')

    # üîé Pega todas as anuidades n√£o pagas de anos anteriores ao atual
    anuidades_em_aberto = AnuidadeAssociado.objects.filter(
        associado=associado,
        pago=False,
        anuidade__ano__lt=hoje.year
    ).select_related('anuidade')

    if not anuidades_em_aberto.exists():
        return HttpResponse("N√£o h√° anuidades em aberto para este associado.", status=404)

    # üî¢ Conta de quantas anuidades est√£o em aberto
    total_anuidades_em_aberto = anuidades_em_aberto.count()

    # üí∞ Valor atual da anuidade (do ano corrente)
    try:
        anuidade_atual = AnuidadeModel.objects.get(ano=hoje.year)
    except AnuidadeModel.DoesNotExist:
        return HttpResponse("Valor da anuidade atual n√£o encontrado.", status=404)

    valor_anuidade_atual = anuidade_atual.valor_anuidade
    valor_total_cobrado = valor_anuidade_atual * total_anuidades_em_aberto

    # üßæ Lista das anuidades em aberto com seus valores originais
    lista_anuidades = " - ".join([
        f"<strong>{a.anuidade.ano}</strong>: R$ {a.anuidade.valor_anuidade:.2f}"
        for a in anuidades_em_aberto
    ])


    # üìù Texto da carta
    texto = f"""
    <br/><br/>
    Prezado(a) <strong>{associado.user.get_full_name()}</strong>,<br/><br/>

    Realizamos uma an√°lise em nosso sistema e identificamos que, at√© o momento, n√£o localizamos o seu nome nas listagens de pagamentos das seguintes anuidades:

    {lista_anuidades}. Tamb√©m n√£o identificamos o envio de comprovantes de pagamento para os anos mencionados. Se os pagamentos j√° foram realizados, por gentileza, envie os comprovantes para que possamos atualizar sua situa√ß√£o.<br/><br/>

    Caso ainda n√£o tenha efetuado os pagamentos, o valor a ser considerado √© com base na anuidade vigente(atual) ({hoje.year}), que √© no valor de <strong>R$ {valor_anuidade_atual:.2f}</strong> por ano em aberto.

    Sendo assim, o valor total das anuidade(es) em aberto √© de: <strong>R$ {valor_total_cobrado:.2f}</strong>.<br/><br/>
    
    <strong>OBS:</strong> As anuidades computadas nesse documento s√£o de anos <font color='red'><strong>anteriores</strong></font> ao ano vigente (atual).<br/><br/>

    Entre em contato para verificar as formas de pagamento. <strong>Facilitamos para vo√ß√™!</strong> <br/><br/>

    <em>Agradecemos por sua aten√ß√£o. A sua contribui√ß√£o fortalece a associa√ß√£o e nos permite seguir prestando apoio e servi√ßos aos associados.</em>
    """

    assinatura = (
        f"{associacao.presidente.user.get_full_name()}<br/>"
        f"Presidente da Associa√ß√£o<br/>"
        f"APAPESC"
    )

    municipio = associacao.municipio.upper() if associacao.municipio else "CIDADE N√ÉO DEFINIDA"
    local_data = f"{municipio}, {data_hoje}."

    # Estilos PDF
    styles = getSampleStyleSheet()
    style_title = ParagraphStyle(
        'Title',
        parent=styles['Title'],
        fontName='Times-Bold',
        fontSize=14,
        alignment=TA_CENTER,
        leading=20,
        spaceBefore=27,
        textColor=colors.black,
    )
    style_normal = ParagraphStyle(
        'Normal',
        parent=styles['Normal'],
        fontName='Times-Roman',
        fontSize=12,
        leading=17,
        alignment=TA_JUSTIFY,
        spaceBefore=0,
    )
    style_assinatura = ParagraphStyle(
        'Assinatura',
        parent=styles['Normal'],
        fontName='Times-Roman',
        fontSize=12,
        leading=18,
        alignment=TA_CENTER,
        spaceBefore=10,
    )
    style_presidente = ParagraphStyle(
        'Presidente',
        parent=styles['Normal'],
        fontName='Times-Bold',
        fontSize=12,
        alignment=2,
        leading=16,
        spaceBefore=10,  # üîº Menos espa√ßo acima
        textColor=colors.grey,
    )
    nome_presidente = ( f"{associacao.presidente.user.get_full_name()}")
    # Gera conte√∫do do PDF
    elements = [
        Spacer(1, 61),
        Paragraph(nome_presidente, style_presidente),
        Spacer(1, 35),
        Paragraph("ANUIDADES EM ABERTO", style_title),
        Spacer(1, 1),
        Paragraph(texto, style_normal),
        Spacer(1, 7),
        Paragraph(local_data, style_normal),
        Spacer(1, 7),
        Paragraph(assinatura, style_assinatura),
    ]

    doc = SimpleDocTemplate(
        buffer,
        pagesize=A4,
        rightMargin=50,
        leftMargin=50,
        topMargin=100,
        bottomMargin=50,
    )
    doc.build(elements)
    buffer.seek(0)

    # Mescla com PDF base
    overlay_pdf = PdfReader(buffer)
    for i, page in enumerate(template_pdf.pages):
        if i < len(overlay_pdf.pages):
            PageMerge(page).add(overlay_pdf.pages[i]).render()

    # Salva PDF final
    nome_associado = slugify(associado.user.get_full_name())
    # üî• Lista de anos em atraso
    anos_em_atraso = "-".join(
        str(a.anuidade.ano) for a in anuidades_em_aberto
    )
    # ‚úÖ Nome do PDF
    pdf_name = f"Notificacao_anuidades_{associado.id}_{nome_associado}_{anos_em_atraso}.pdf"
    pdf_path = os.path.join(settings.MEDIA_ROOT, 'documentos', pdf_name)
    os.makedirs(os.path.dirname(pdf_path), exist_ok=True)
    PdfWriter(pdf_path, trailer=template_pdf).write()

    pdf_url = f"{settings.MEDIA_URL}documentos/{pdf_name}"
    query = urlencode({'pdf_url': pdf_url})
    return redirect(f"{reverse('app_automacoes:pagina_acoes', args=[associado.id])}?{query}&tipo=cobranca")
# -----------------------------------------------------------------------------------------------------------

# =======================================================================================================
# GERAR COBRAN√áA/NOTIFICA√á√ÉO EM LOTE
import zipfile
import re

def slugify_filename(nome):
    return re.sub(r'\W+', '_', nome.strip().lower())

def gerar_cobrancas_em_lote(request):
    hoje = datetime.now()
    ano_atual = hoje.year
    data_hoje = hoje.strftime('%d/%m/%Y')

    # Caminho do template base
    template_path = os.path.join(settings.MEDIA_ROOT, 'pdf/cobranca_anuidades.pdf')
    if not os.path.exists(template_path):
        return HttpResponse("Modelo base da cobran√ßa n√£o foi encontrado.", status=404)
    template_pdf = PdfReader(template_path)

    # Verifica se tem anuidade do ano atual
    try:
        anuidade_atual = AnuidadeModel.objects.get(ano=ano_atual)
    except AnuidadeModel.DoesNotExist:
        return HttpResponse("Valor da anuidade atual n√£o foi configurado.", status=404)

    valor_anuidade_atual = anuidade_atual.valor_anuidade

    # Diret√≥rio de sa√≠da
    output_dir = os.path.join(settings.MEDIA_ROOT, 'documentos', 'cobrancas_em_lote')
    os.makedirs(output_dir, exist_ok=True)

    arquivos_gerados = []

    for associado in AssociadoModel.objects.all():
        anuidades_em_aberto = AnuidadeAssociado.objects.filter(
            associado=associado,
            pago=False,
            anuidade__ano__lt=ano_atual
        ).select_related('anuidade')

        if not anuidades_em_aberto.exists():
            continue

        total_anuidades_em_aberto = anuidades_em_aberto.count()
        valor_total_cobrado = valor_anuidade_atual * total_anuidades_em_aberto

        lista_anuidades = " - ".join([
            f"<strong>{a.anuidade.ano}</strong>: R$ {a.anuidade.valor_anuidade:.2f}"
            for a in anuidades_em_aberto
        ])

        associacao = associado.associacao
        municipio = associacao.municipio.upper() if associacao.municipio else "CIDADE N√ÉO DEFINIDA"
        local_data = f"{municipio}, {data_hoje}."
        nome_presidente = associacao.presidente.user.get_full_name()
        assinatura = f"{nome_presidente}<br/>Presidente da Associa√ß√£o<br/>APAPESC"

        texto = f"""
        <br/><br/>
        Prezado(a) <strong>{associado.user.get_full_name()}</strong>,<br/><br/>

        Realizamos uma an√°lise em nosso sistema e identificamos que, at√© o momento, n√£o localizamos o seu nome nas listagens de pagamentos das seguintes anuidades:

        {lista_anuidades}. Tamb√©m n√£o identificamos o envio de comprovantes de pagamento para os anos mencionados. Se os pagamentos j√° foram realizados, por gentileza, envie os comprovantes para que possamos atualizar sua situa√ß√£o.<br/><br/>

        Caso ainda n√£o tenha efetuado os pagamentos, o valor a ser considerado √© com base na anuidade vigente(atual) ({ano_atual}), que √© no valor de <strong>R$ {valor_anuidade_atual:.2f}</strong> por ano em aberto.

        Sendo assim, o valor total das anuidade(es) em aberto √© de: <strong>R$ {valor_total_cobrado:.2f}</strong>.<br/><br/>

        <strong>OBS:</strong> As anuidades computadas nesse documento s√£o de anos <font color='red'><strong>anteriores</strong></font> ao ano vigente (atual).<br/><br/>

        Entre em contato para verificar as formas de pagamento. <strong>Facilitamos para vo√ß√™!</strong> <br/><br/>

        <em>Agradecemos por sua aten√ß√£o. A sua contribui√ß√£o fortalece a associa√ß√£o e nos permite seguir prestando apoio e servi√ßos aos associados.</em>
        """


        # Estilos PDF
        styles = getSampleStyleSheet()
        style_title = ParagraphStyle(
            'Title',
            parent=styles['Title'],
            fontName='Times-Bold',
            fontSize=14,
            alignment=TA_CENTER,
            leading=20,
            spaceBefore=27,
            textColor=colors.black,
        )
        style_normal = ParagraphStyle(
            'Normal',
            parent=styles['Normal'],
            fontName='Times-Roman',
            fontSize=12,
            leading=17,
            alignment=TA_JUSTIFY,
            spaceBefore=0,
        )
        style_assinatura = ParagraphStyle(
            'Assinatura',
            parent=styles['Normal'],
            fontName='Times-Roman',
            fontSize=12,
            leading=18,
            alignment=TA_CENTER,
            spaceBefore=10,
        )
        style_presidente = ParagraphStyle(
            'Presidente',
            parent=styles['Normal'],
            fontName='Times-Bold',
            fontSize=12,
            alignment=2,
            leading=16,
            spaceBefore=10,
            textColor=colors.grey,
        )

        # Cria PDF
        buffer = BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=A4, rightMargin=50, leftMargin=50, topMargin=100, bottomMargin=50)
        elements = [
            Spacer(1, 61),
            Paragraph(nome_presidente, style_presidente),
            Spacer(1, 35),
            Paragraph("ANUIDADES EM ABERTO", style_title),
            Spacer(1, 1),
            Paragraph(texto, style_normal),
            Spacer(1, 7),
            Paragraph(local_data, style_normal),
            Spacer(1, 7),
            Paragraph(assinatura, style_assinatura),
        ]
        doc.build(elements)
        buffer.seek(0)

        overlay_pdf = PdfReader(buffer)
        template_pdf = PdfReader(template_path)
        for i, page in enumerate(template_pdf.pages):
            if i < len(overlay_pdf.pages):
                PageMerge(page).add(overlay_pdf.pages[i]).render()

        nome_formatado = slugify_filename(associado.user.get_full_name())
        pdf_name = f"cobranca_{nome_formatado}_{ano_atual}.pdf"
        pdf_path = os.path.join(output_dir, pdf_name)
        PdfWriter(pdf_path, trailer=template_pdf).write()
        arquivos_gerados.append(pdf_path)

    # Cria o zip
    zip_path = os.path.join(settings.MEDIA_ROOT, 'documentos', f"cobrancas_anuidades_{ano_atual}.zip")
    with zipfile.ZipFile(zip_path, 'w') as zipf:
        for file in arquivos_gerados:
            zipf.write(file, os.path.basename(file))

    # Redireciona para download
    zip_url = f"{settings.MEDIA_URL}documentos/cobrancas_anuidades_{ano_atual}.zip"
    return redirect(zip_url)



# =======================================================================================================
# GERAR RECIBO DE ENTRADA EXTRA ASSOCIADO
# app_automacoes/views.py

def gerar_recibo_entrada_extra(request, entrada_id):
    entrada = get_object_or_404(EntradaFinanceira, id=entrada_id, status_pagamento='pago')

    servico = getattr(entrada, 'entrada_servico_extra', None)
    if not servico or not servico.extra_associado:
        return HttpResponse("Esta entrada n√£o est√° vinculada a um servi√ßo de extra associado.", status=400)

    extra = servico.extra_associado
    associacao = entrada.associacao

    # Caminho para o PDF de template
    template_path = os.path.join(settings.MEDIA_ROOT, 'pdf/recibo_servico_extra.pdf')
    if not os.path.exists(template_path):
        return HttpResponse("O PDF base para o Recibo de Entrada Extra n√£o foi encontrado.", status=404)

    template_pdf = PdfReader(template_path)
    buffer = BytesIO()
    data_hoje = datetime.now().strftime('%d/%m/%Y')

    # √öltimo pagamento
    pagamento = entrada.pagamentos.order_by('-data_pagamento').first()
    if not pagamento:
        return HttpResponse("Nenhum pagamento registrado para essa entrada.", status=400)

    data_pagamento = pagamento.data_pagamento.strftime('%d/%m/%Y')

    # Estilos
    styles = getSampleStyleSheet()
    style_title = ParagraphStyle(
        'Title',
        parent=styles['Title'],
        fontName='Times-Bold',
        fontSize=14,
        alignment=TA_CENTER,
        leading=28,
        spaceBefore=40,
        textColor=colors.black,
    )
    style_normal = ParagraphStyle(
        'Normal',
        parent=styles['Normal'],
        fontName='Times-Roman',
        fontSize=12,
        leading=18,
        alignment=TA_JUSTIFY,
        spaceBefore=0,
    )
    style_assinatura = ParagraphStyle(
        'Assinatura',
        parent=styles['Normal'],
        fontName='Times-Roman',
        fontSize=12,
        leading=18,
        alignment=TA_CENTER,
        spaceBefore=10,
    )
    style_presidente = ParagraphStyle(
        'Presidente',
        parent=styles['Normal'],
        fontName='Times-Bold',
        fontSize=12,
        alignment=2,
        leading=16,
        spaceBefore=10,
        textColor=colors.grey,
    )
    nome_presidente = associacao.presidente.user.get_full_name()

    municipio = associacao.municipio.upper() if associacao.municipio else "CIDADE N√ÉO DEFINIDA"
    local_data = f"{municipio}, {data_hoje}."

    # Texto
    texto = (
        f"Recebemos de <strong>{extra.nome_completo}</strong>, "
        f"inscrito no CPF sob o n¬∫ <strong>{extra.cpf}</strong>, "
        f"a import√¢ncia de <strong>R$ {entrada.valor_pagamento:.2f}</strong> "
        f"(referente ao servi√ßo de <strong>{entrada.tipo_servico.nome}</strong>), "
        f"pelo qual, registramos a confirma√ß√£o de pagamento na data de <strong>{data_pagamento}</strong>. "
        f"<br/><br/>Este pagamento foi efetuado √† <strong>{associacao.razao_social}</strong>, "
        f"inscrita no CNPJ sob o n¬∫ {associacao.cnpj}, com sede na {associacao.logradouro}, n¬∫ {associacao.numero}, "
        f"{associacao.bairro}, {associacao.municipio or 'Munic√≠pio n√£o informado'}/{associacao.uf}. "
        f"<br/><br/><i>Salientamos o nosso agradecimento pela contrata√ß√£o dos nossos servi√ßos e pela confia√ß√£o no nosso trabalho. "
        f" Estaremos sempre √† sua disposi√ß√£o! Conte Gente.</i>"
    )

    assinatura = (
        f"{nome_presidente}<br/>"
        f"Presidente da Associa√ß√£o"
    )

    # Elementos do PDF
    elements = [
        Spacer(1, 50),
        Paragraph(nome_presidente, style_presidente),
        Spacer(1, 35),
        Paragraph("RECIBO DE SERVI√áO PRESTADO", style_title),
        Spacer(1, 20),
        Paragraph(texto, style_normal),
        Spacer(1, 24),
        Paragraph(local_data, style_normal),
        Spacer(1, 20),
        Paragraph(assinatura, style_assinatura),
    ]

    doc = SimpleDocTemplate(
        buffer,
        pagesize=A4,
        rightMargin=50,
        leftMargin=50,
        topMargin=120,
        bottomMargin=50,
    )
    doc.build(elements)
    buffer.seek(0)

    overlay_pdf = PdfReader(buffer)
    for index, template_page in enumerate(template_pdf.pages):
        if index < len(overlay_pdf.pages):
            overlay_page = overlay_pdf.pages[index]
            PageMerge(template_page).add(overlay_page).render()

    pdf_name = f"recibo_servico_extra_{extra.id}_{entrada.id}.pdf"
    pdf_path = os.path.join(settings.MEDIA_ROOT, 'documentos', pdf_name)
    os.makedirs(os.path.dirname(pdf_path), exist_ok=True)
    PdfWriter(pdf_path, trailer=template_pdf).write()

    pdf_url = f"{settings.MEDIA_URL}documentos/{pdf_name}"
    query_string = urlencode({'pdf_url': pdf_url})
    return redirect(f"{reverse('app_automacoes:pagina_acoes_entrada', args=[entrada.id])}?{query_string}&tipo=servico_extra")



# =======================================================================================================
# GERAR CARTEIRINHA APAPESC ASSOCIADO
# app_automacoes/views.py

def gerar_carteirinha_apapesc(request, associado_id):
    associado = AssociadoModel.objects.get(id=associado_id)
    associacao = associado.associacao

    # Caminho para o PDF de template
    # Busca o modelo de carteirinha
    template_instance = CarteirinhaAssociadoModel.objects.first()
    if not template_instance or not template_instance.pdf_base:
        return HttpResponse("Modelo de carteirinha n√£o dispon√≠vel.", status=404)

    template_path = template_instance.pdf_base.path
    template_pdf = PdfReader(template_path)

    # Carrega o template

    buffer = BytesIO()


    # Inicia o canvas sobre buffer
    c = canvas.Canvas(buffer, pagesize=A4)
    c.setFont("Helvetica", 8)

    # Cor dourada clara
    dourado_claro = Color(218/255, 165/255, 32/255)
    c.setFillColor(dourado_claro)

    # Dados do associado
    nome = associado.user.get_full_name()
    profissao = associado.profissao or ''
    data_filiacao = associado.data_filiacao.strftime('%d/%m/%Y') if associado.data_filiacao else ''
    cpf = associado.cpf or ''
    rgp = associado.rgp or ''
    primeiro_registro = associado.primeiro_registro.strftime('%d/%m/%Y') if associado.primeiro_registro else ''
    municipio = associado.municipio_circunscricao or ''
    estado = associado.uf or ''

    # Deslocamento e posi√ß√µes ajustadas
    x_base = 25     # 2.5cm da esquerda
    y = 758         # Subiu 70 pontos

    # Renderiza as linhas
    c.drawString(x_base, y, f"{nome}")
    y -= 22
    c.drawString(x_base, y, f"{profissao}")
    c.drawString(x_base + 180, y, f"{data_filiacao}")
    y -= 23
    c.drawString(x_base, y, f"{cpf}")
    c.drawString(x_base + 80, y, f"{rgp}")
    c.drawString(x_base + 180, y, f"{primeiro_registro}")
    y -= 25
    c.drawString(x_base, y, f"{municipio}")
    c.drawString(x_base + 200, y, f"{estado}")
    y -= 20
        
    c.showPage()
    c.save()

    buffer.seek(0)
    overlay_pdf = PdfReader(buffer)

    # Mescla o conte√∫do gerado com o template
    for i, page in enumerate(template_pdf.pages):
        if i < len(overlay_pdf.pages):
            PageMerge(page).add(overlay_pdf.pages[i]).render()

    # Salvar arquivo final
    output_path = os.path.join(settings.MEDIA_ROOT, f'documentos/carteirinha_{associado.id}.pdf')
    os.makedirs(os.path.dirname(output_path), exist_ok=True)
    PdfWriter(output_path, trailer=template_pdf).write()

    # URL para acesso
    pdf_url = f"{settings.MEDIA_URL}documentos/carteirinha_{associado.id}.pdf"
    return redirect(f"{reverse('app_automacoes:pagina_acoes', args=[associado.id])}?pdf_url={pdf_url}")
    


# GERAR PROCURA√á√ÉO ADMINISTRATIVA
def gerar_procuracao_administrativa(request, associado_id):
    associado = AssociadoModel.objects.get(id=associado_id)

    # Caminho para o PDF de template
    template_path = os.path.join(settings.MEDIA_ROOT, 'pdf/procuracao_administrativa.pdf')
    if not os.path.exists(template_path):
        return HttpResponse("O PDF base para a Procura√ß√£o Administrativa n√£o foi encontrado.", status=404)

    template_pdf = PdfReader(template_path)

    # Buffer em mem√≥ria para o conte√∫do din√¢mico
    buffer = BytesIO()

    # Definindo estilos personalizados
    styles = getSampleStyleSheet()
    style_title = ParagraphStyle(
        'Title',
        parent=styles['Title'],
        fontName='Times-Bold',
        fontSize=17,
        alignment=1,  # Centralizado
        leading=32,  # Espa√ßamento entre as linhas do t√≠tulo
        spaceBefore=80,  # Espa√ßamento antes do t√≠tulo
    )
    style_normal = ParagraphStyle(
        'Normal',
        parent=styles['Normal'],
        fontName='Times-Roman',
        fontSize=12,
        leading=14,  # Espa√ßamento entre linhas
        alignment=4,  # Justificado
    )
    style_assinatura = ParagraphStyle(
        'Normal',
        parent=styles['Normal'],
        fontName='Times-Roman',
        fontSize=12,
        leading=14,  # Espa√ßamento entre linhas
        alignment=1,  # Justificado
    )
    # Data atual
    data_atual = datetime.now().strftime('%d/%m/%Y')

    # Texto da declara√ß√£o
    texto1 = (
        f"<strong>OUTORGANTE(S)</strong>: <strong>{associado.user.get_full_name()}</strong>, brasileira, "
        f"profiss√£o, {associado.profissao}, estado civil, {associado.estado_civil}, CPF n¬∫ {associado.cpf}, "
        f"RG n¬∫ {associado.rg_numero}, com resid√™ncia e domic√≠lio estabelecido √° {associado.logradouro}, "
        f"n¬∫ {associado.numero}, {associado.complemento}, {associado.bairro}, {associado.municipio} -"
        f" {associado.uf} {associado.cep}. "
        f"<br /><br /><strong>OUTORGADOS</strong>: <strong>CRISTIANI JORDANI DOS SANTOS RAMOS</strong>, "
        f"brasileira, casada, advogada, inscri√ß√£o na OAB/SC sob o n√∫mero 51.410, inscrita no CPF 853.801.219-34, "
        f"<strong>SAMARA IZILDA CORREA DOS SANTOS</strong>,  brasileira, divorciada,"
        f"advogada, inscri√ß√£o na OAB/SC sob o n√∫mero 51.380, inscrita no CPF 027.034.419-59, integrantes do "
        f"escrit√≥rio JORDANI & SANTOS Advogados Associados."
    )
    texto2 = (
        f"<strong>PODERES:</strong> Pelo presente instrumento, o(a) outorgante confere plenos poderes √† <strong>APAPESC - "
        f"Associa√ß√£o de Assist√™ncia aos Servidores P√∫blicos de Santa Catarina</strong> e/ou seus representantes legais, "
        f"para que, em seu nome, representem seus interesses junto a qualquer √≥rg√£o da Administra√ß√£o P√∫blica Direta ou Indireta, "
        f"entidades aut√°rquicas, fundacionais, ou quaisquer reparti√ß√µes governamentais, em todas as esferas federativas."
        
        f"<br />Esta procura√ß√£o concede poderes amplos, gerais e ilimitados, inclusive os da cl√°usula <em>‚Äúad judicia et extra‚Äù</em>, "
        f"permitindo aos outorgados propor requerimentos, firmar declara√ß√µes, prestar informa√ß√µes, protocolar documentos, "
        f"solicitar dilig√™ncias e praticar todos os atos necess√°rios para assegurar os direitos do(a) associado(a), "
        f"em especial <strong>para fins de requerimento administrativo do benef√≠cio do Seguro Defeso</strong>, junto ao INSS, MAPA, MTE "
        f"e demais √≥rg√£os competentes."
        
        f"<br /><br />A presente outorga autoriza ainda a obten√ß√£o de informa√ß√µes, consultas em sistemas oficiais, assinatura de formul√°rios, "
        f"declara√ß√µes de elegibilidade, e realiza√ß√£o de todos os procedimentos pertinentes ao andamento e conclus√£o do referido pedido de benef√≠cio."

        f"<br /><br />Os poderes ora conferidos poder√£o ser exercidos em conjunto ou separadamente por quaisquer dos representantes da APAPESC, "
        f"com faculdade de substabelecimento, no todo ou em parte, a quem melhor aprouver, com ou sem reserva de poderes."

        f"<br /><br />Esta procura√ß√£o √© v√°lida por prazo indeterminado, at√© que seja formalmente revogada pelo(a) outorgante."
    )


    # Local e data
    local_data = f"{associado.reparticao.municipio_sede}, {data_atual}."
    assinatura = (
        "____________________________________________________________________<br/>"
        f"<strong>{associado.user.get_full_name()}</strong><br/>"
        f"CPF: {associado.cpf}<br/>"
    )

    # Elementos do PDF
    elements = [
        Paragraph("PROCURA√á√ÉO ADMINISTRATIVA", style_title),
        Spacer(1, 1),
        Paragraph(texto1, style_normal),
        Spacer(1, 5),
        Paragraph(texto2, style_normal),
        Spacer(1, 5),
        Paragraph(local_data, style_normal),
        Spacer(1, 10),
        Paragraph(assinatura, style_assinatura),
    ]

    # Criando o documento PDF
    doc = SimpleDocTemplate(
        buffer,
        pagesize=A4,
        rightMargin=85,
        leftMargin=85,
        topMargin=140,
        bottomMargin=40,
    )

    doc.build(elements)

    # Mesclando o conte√∫do din√¢mico com o template
    buffer.seek(0)
    overlay_pdf = PdfReader(buffer)

    # **Ajuste Importante:**
    # O n√∫mero de p√°ginas do template e o overlay_pdf deve ser gerenciado com cuidado.
    for index, template_page in enumerate(template_pdf.pages):
        if index < len(overlay_pdf.pages):
            overlay_page = overlay_pdf.pages[index]
            PageMerge(template_page).add(overlay_page).render()

    # Salvando o PDF final
    pdf_name = f"procuracao_administrativa_{associado.user.get_full_name().replace(' ', '_')}.pdf"
    pdf_path = os.path.join(settings.MEDIA_ROOT, 'documentos', pdf_name)
    os.makedirs(os.path.dirname(pdf_path), exist_ok=True)
    PdfWriter(pdf_path, trailer=template_pdf).write()

    # Preparando o redirecionamento
    pdf_url = f"{settings.MEDIA_URL}documentos/{pdf_name}"
    return redirect(f"{reverse('app_automacoes:pagina_acoes', args=[associado.id])}?pdf_url={pdf_url}")
# ======================================================================================================

# Autorizacao Direitos de Imagem

def gerar_autorizacao_direitos_imagem(request, associado_id):
    associado = AssociadoModel.objects.get(id=associado_id)

    # Caminho para o PDF de template
    template_path = os.path.join(settings.MEDIA_ROOT, 'pdf/autorizacao_direito_imagem.pdf')
    if not os.path.exists(template_path):
        return HttpResponse("O PDF base para a Autoriza√ß√£o de uso e Direitos de Imagem.", status=404)

    template_pdf = PdfReader(template_path)

    # Buffer em mem√≥ria para o conte√∫do din√¢mico
    buffer = BytesIO()

    # Definindo estilos personalizados
    styles = getSampleStyleSheet()
    style_title = ParagraphStyle(
        'Title',
        parent=styles['Title'],
        fontName='Times-Bold',
        fontSize=17,
        alignment=1,  # Centralizado
        leading=32,  # Espa√ßamento entre as linhas do t√≠tulo
        spaceBefore=100,  # Espa√ßamento antes do t√≠tulo
    )
    style_normal = ParagraphStyle(
        'Normal',
        parent=styles['Normal'],
        fontName='Times-Roman',
        fontSize=12,
        leading=14,  # Espa√ßamento entre linhas
        alignment=4,  # Justificado
    )
    style_assinatura = ParagraphStyle(
        'Normal',
        parent=styles['Normal'],
        fontName='Times-Roman',
        fontSize=12,
        leading=14,  # Espa√ßamento entre linhas
        alignment=1,  # Justificado
    )
    # Data atual
    data_atual = datetime.now().strftime('%d/%m/%Y')

    # Texto da Autoriza√ß√£o
    texto1 = (
        f"<strong>ATORIZA√á√ÇO</strong>: Eu, <strong>{associado.user.get_full_name()}</strong>, brasileira, "
        f"profiss√£o, {associado.profissao}, estado civil, {associado.estado_civil}, CPF n¬∫ {associado.cpf}, "
        f"RG n¬∫ {associado.rg_numero}, com resid√™ncia e domic√≠lio estabelecido √° {associado.logradouro}, "
        f"n¬∫ {associado.numero}, {associado.complemento}, {associado.bairro}, {associado.municipio} -"
        f" {associado.uf} {associado.cep}. "
        f"<br /><br /><strong>AUTORIZO</strong>: <strong> A ASSOCIA√á√ÉO APAPESC</strong>: "

    )
    texto2 = (
        f"<strong>AUTORIZA√á√ÉO:</strong> O(A) associado(a) autoriza expressamente a <strong>APAPESC - Associa√ß√£o de "
        f"Assist√™ncia aos Servidores P√∫blicos de Santa Catarina</strong> a utilizar sua imagem, voz e nome para fins institucionais, "
        f"incluindo, mas n√£o se limitando a, postagens em redes sociais, inser√ß√µes em campanhas de divulga√ß√£o, mat√©rias jornal√≠sticas, "
        f"artigos e publica√ß√µes no site oficial da associa√ß√£o, bem como em materiais impressos ou digitais voltados √† comunica√ß√£o com os associados "
        f"e √† promo√ß√£o das atividades realizadas pela associa√ß√£o. "
        f"<br /><br />A presente autoriza√ß√£o √© concedida de forma gratuita, por prazo indeterminado e em car√°ter irrevog√°vel, abrangendo o uso em "
        f"todo o territ√≥rio nacional e internacional, sem que isso implique em qualquer √¥nus, remunera√ß√£o ou compensa√ß√£o ao(√†) associado(a). "
        f"<br /><br />A APAPESC compromete-se a utilizar a imagem de forma √©tica, respeitosa e alinhada aos princ√≠pios estatut√°rios da associa√ß√£o, "
        f"preservando sempre a honra, reputa√ß√£o e dignidade do(a) associado(a)."
    )


    # Local e data
    local_data = f"{associado.reparticao.municipio_sede}, {data_atual}."
    assinatura = (
        "____________________________________________________________________<br/>"
        f"<strong>{associado.user.get_full_name()}</strong><br/>"
        f"CPF: {associado.cpf}<br/>"
    )

    # Elementos do PDF
    elements = [
        Paragraph("AUTORIZA√á√ÉO DE USO E DIREITOS IMAGEM", style_title),
        Spacer(1, 10),
        Paragraph(texto1, style_normal),
        Spacer(1, 10),
        Paragraph(texto2, style_normal),
        Spacer(1, 10),
        Paragraph(local_data, style_normal),
        Spacer(1, 24),
        Paragraph(assinatura, style_assinatura),
    ]

    # Criando o documento PDF
    doc = SimpleDocTemplate(
        buffer,
        pagesize=A4,
        rightMargin=85,
        leftMargin=85,
        topMargin=140,
        bottomMargin=40,
    )

    doc.build(elements)

    # Mesclando o conte√∫do din√¢mico com o template
    buffer.seek(0)
    overlay_pdf = PdfReader(buffer)

    # **Ajuste Importante:**
    # O n√∫mero de p√°ginas do template e o overlay_pdf deve ser gerenciado com cuidado.
    for index, template_page in enumerate(template_pdf.pages):
        if index < len(overlay_pdf.pages):
            overlay_page = overlay_pdf.pages[index]
            PageMerge(template_page).add(overlay_page).render()

    # Salvando o PDF final
    pdf_name = f"autorizacao_direito_imagem_{associado.user.get_full_name().replace(' ', '_')}.pdf"
    pdf_path = os.path.join(settings.MEDIA_ROOT, 'documentos', pdf_name)
    os.makedirs(os.path.dirname(pdf_path), exist_ok=True)
    PdfWriter(pdf_path, trailer=template_pdf).write()

    # Preparando o redirecionamento
    pdf_url = f"{settings.MEDIA_URL}documentos/{pdf_name}"
    return redirect(f"{reverse('app_automacoes:pagina_acoes', args=[associado.id])}?pdf_url={pdf_url}")
# ======================================================================================================    

# AUTORIZA√á√ÇO ACESSO GOV
def gerar_autorizacao_acesso_gov(request, associado_id):
    associado = AssociadoModel.objects.get(id=associado_id)

    # Caminho para o PDF de template
    template_path = os.path.join(settings.MEDIA_ROOT, 'pdf/autorizacao_acesso_gov.pdf')
    if not os.path.exists(template_path):
        return HttpResponse("O PDF base para a Autoriza√ß√£o Acesso e Gest√£o conta Gov.", status=404)

    template_pdf = PdfReader(template_path)

    # Buffer em mem√≥ria para o conte√∫do din√¢mico
    buffer = BytesIO()

    # Definindo estilos personalizados
    styles = getSampleStyleSheet()
    style_title = ParagraphStyle(
        'Title',
        parent=styles['Title'],
        fontName='Times-Bold',
        fontSize=17,
        alignment=1,  # Centralizado
        leading=32,  # Espa√ßamento entre as linhas do t√≠tulo
        spaceBefore=100,  # Espa√ßamento antes do t√≠tulo
    )
    style_normal = ParagraphStyle(
        'Normal',
        parent=styles['Normal'],
        fontName='Times-Roman',
        fontSize=12,
        leading=14,  # Espa√ßamento entre linhas
        alignment=4,  # Justificado
    )
    style_assinatura = ParagraphStyle(
        'Normal',
        parent=styles['Normal'],
        fontName='Times-Roman',
        fontSize=12,
        leading=14,  # Espa√ßamento entre linhas
        alignment=1,  # Justificado
    )
    # Data atual
    data_atual = datetime.now().strftime('%d/%m/%Y')

    # Texto da Autoriza√ß√£o acesso e Gest√£o conta Gov
    texto1 = (
        f"<strong>ATORIZA√á√ÇO</strong>: Eu, <strong>{associado.user.get_full_name()}</strong>, brasileira, "
        f"profiss√£o, {associado.profissao}, estado civil, {associado.estado_civil}, CPF n¬∫ {associado.cpf}, "
        f"RG n¬∫ {associado.rg_numero}, com resid√™ncia e domic√≠lio estabelecido √° {associado.logradouro}, "
        f"n¬∫ {associado.numero}, {associado.complemento}, {associado.bairro}, {associado.municipio} -"
        f" {associado.uf} {associado.cep}. "
        f"<br /><br /><strong>AUTORIZO</strong>: <strong>INTEGRANTES ADMINISTRATIVOS DA APAPESC</strong>: "

    )
    texto2 = (
    f"<strong>AUTORIZA√á√ÉO DE ACESSO √Ä CONTA GOV.BR:</strong> O(A) associado(a) autoriza formalmente a <strong>APAPESC - "
    f"Associa√ß√£o de Assist√™ncia aos Servidores P√∫blicos de Santa Catarina</strong>, por meio de seus representantes administrativos, "
    f"a realizar acesso e gest√£o das informa√ß√µes dispon√≠veis na plataforma <strong>Gov.br</strong>, vinculadas ao seu CPF, exclusivamente "
    f"para fins de representa√ß√£o institucional, acompanhamento de benef√≠cios, atualiza√ß√£o cadastral, instru√ß√£o de processos administrativos "
    f"ou judiciais e demais procedimentos relacionados aos direitos e interesses do(a) associado(a) perante √≥rg√£os p√∫blicos. "
    f"<br /><br />A presente autoriza√ß√£o inclui, mas n√£o se limita a: gera√ß√£o e uso de senhas tempor√°rias, acesso a hist√≥ricos de benef√≠cios, "
    f"envio e recebimento de documentos por meio da conta Gov.br, assinatura digital de requerimentos e consultas em nome do(a) associado(a). "
    f"<br /><br />A autoriza√ß√£o √© concedida por prazo indeterminado, podendo ser revogada a qualquer tempo por manifesta√ß√£o expressa do(a) associado(a), "
    f"e se destina exclusivamente ao exerc√≠cio de atividades relacionadas √† atua√ß√£o da associa√ß√£o em defesa dos interesses do(a) outorgante. "
    f"<br /><br />A APAPESC compromete-se a utilizar as credenciais de forma √©tica, segura, e dentro dos limites legais, respeitando os princ√≠pios "
    f"da confidencialidade, privacidade e boa-f√©."
)



    # Local e data
    local_data = f"{associado.reparticao.municipio_sede}, {data_atual}."
    assinatura = (
        "____________________________________________________________________<br/>"
        f"<strong>{associado.user.get_full_name()}</strong><br/>"
        f"CPF: {associado.cpf}<br/>"
    )

    # Elementos do PDF
    elements = [
        Paragraph("AUTORIZA√á√ÉO DE ACESSO EM CONTA GOV", style_title),
        Spacer(1, 10),
        Paragraph(texto1, style_normal),
        Spacer(1, 10),
        Paragraph(texto2, style_normal),
        Spacer(1, 10),
        Paragraph(local_data, style_normal),
        Spacer(1, 24),
        Paragraph(assinatura, style_assinatura),
    ]

    # Criando o documento PDF
    doc = SimpleDocTemplate(
        buffer,
        pagesize=A4,
        rightMargin=85,
        leftMargin=85,
        topMargin=140,
        bottomMargin=40,
    )

    doc.build(elements)

    # Mesclando o conte√∫do din√¢mico com o template
    buffer.seek(0)
    overlay_pdf = PdfReader(buffer)

    # **Ajuste Importante:**
    # O n√∫mero de p√°ginas do template e o overlay_pdf deve ser gerenciado com cuidado.
    for index, template_page in enumerate(template_pdf.pages):
        if index < len(overlay_pdf.pages):
            overlay_page = overlay_pdf.pages[index]
            PageMerge(template_page).add(overlay_page).render()

    # Salvando o PDF final
    pdf_name = f"autorizacao_acesso_gov_{associado.user.get_full_name().replace(' ', '_')}.pdf"
    pdf_path = os.path.join(settings.MEDIA_ROOT, 'documentos', pdf_name)
    os.makedirs(os.path.dirname(pdf_path), exist_ok=True)
    PdfWriter(pdf_path, trailer=template_pdf).write()

    # Preparando o redirecionamento
    pdf_url = f"{settings.MEDIA_URL}documentos/{pdf_name}"
    return redirect(f"{reverse('app_automacoes:pagina_acoes', args=[associado.id])}?pdf_url={pdf_url}")
# ======================================================================================================        


# Declara√ß√£o de Desfilia√ß√£o
def gerar_declaracao_desfiliacao(request, associado_id):
    associado = AssociadoModel.objects.get(id=associado_id)

    # Caminho para o PDF de template
    template_path = os.path.join(settings.MEDIA_ROOT, 'pdf/declaracao_desfiliacao.pdf')
    if not os.path.exists(template_path):
        return HttpResponse("O PDF base para a Autoriza√ß√£o Acesso e Gest√£o conta Gov.", status=404)

    template_pdf = PdfReader(template_path)

    # Buffer em mem√≥ria para o conte√∫do din√¢mico
    buffer = BytesIO()

    # Definindo estilos personalizados
    styles = getSampleStyleSheet()
    style_title = ParagraphStyle(
        'Title',
        parent=styles['Title'],
        fontName='Times-Bold',
        fontSize=17,
        alignment=1,  # Centralizado
        leading=32,  # Espa√ßamento entre as linhas do t√≠tulo
        spaceBefore=100,  # Espa√ßamento antes do t√≠tulo
    )
    style_normal = ParagraphStyle(
        'Normal',
        parent=styles['Normal'],
        fontName='Times-Roman',
        fontSize=12,
        leading=14,  # Espa√ßamento entre linhas
        alignment=4,  # Justificado
    )
    style_assinatura = ParagraphStyle(
        'Normal',
        parent=styles['Normal'],
        fontName='Times-Roman',
        fontSize=12,
        leading=14,  # Espa√ßamento entre linhas
        alignment=1,  # Justificado
    )
    # Data atual
    data_atual = datetime.now().strftime('%d/%m/%Y')

    # Texto do pedido de desfilia√ß√£o
    texto1 = (
        f"<strong>EU</strong>: <strong>{associado.user.get_full_name()}</strong>, brasileira, "
        f"profiss√£o, {associado.profissao}, estado civil, {associado.estado_civil}, CPF n¬∫ {associado.cpf}, "
        f"RG n¬∫ {associado.rg_numero}, com resid√™ncia e domic√≠lio estabelecido √° {associado.logradouro}, "
        f"n¬∫ {associado.numero}, {associado.complemento}, {associado.bairro}, {associado.municipio} -"
        f" {associado.uf} {associado.cep}. "
        f"<br /><br /><strong>DECLARO</strong>: "
    )
    
    texto2 = (
        f"<strong>DECLARA√á√ÉO DE DESFILIA√á√ÉO VOLUNT√ÅRIA:</strong> Eu, <strong>{associado.user.get_full_name()}</strong>, "
        f"associado(a) da <strong>APAPESC - Associa√ß√£o de Assist√™ncia aos Servidores P√∫blicos de Santa Catarina</strong>, "
        f"venho por meio desta, manifestar de forma livre, consciente e espont√¢nea minha decis√£o de <strong>me desligar do quadro de associados da APAPESC</strong>."
        f"<br /><br />Declaro estar ciente de que, a partir desta data, deixarei de usufruir dos benef√≠cios, servi√ßos e representa√ß√µes oferecidos pela associa√ß√£o, "
        f"renunciando voluntariamente a qualquer v√≠nculo associativo ativo."
        f"<br /><br />Solicito que sejam adotadas as provid√™ncias administrativas necess√°rias para formaliza√ß√£o da minha desfilia√ß√£o, "
        f"bem como a atualiza√ß√£o dos registros internos da associa√ß√£o."
        f"<br /><br />Reitero que esta decis√£o √© tomada por minha livre e espont√¢nea vontade, sem qualquer coa√ß√£o ou influ√™ncia de terceiros, "
        f"e reconhe√ßo o trabalho e a import√¢ncia da APAPESC na defesa dos interesses dos servidores p√∫blicos catarinenses."
    )




    # Local e data
    local_data = f"{associado.reparticao.municipio_sede}, {data_atual}."
    assinatura = (
        "____________________________________________________________________<br/>"
        f"<strong>{associado.user.get_full_name()}</strong><br/>"
        f"CPF: {associado.cpf}<br/>"
    )

    # Elementos do PDF
    elements = [
        Paragraph("DECLARA√á√ÉO DE DESFILIA√á√ÉO", style_title),
        Spacer(1, 10),
        Paragraph(texto1, style_normal),
        Spacer(1, 10),
        Paragraph(texto2, style_normal),
        Spacer(1, 10),
        Paragraph(local_data, style_normal),
        Spacer(1, 24),
        Paragraph(assinatura, style_assinatura),
    ]

    # Criando o documento PDF
    doc = SimpleDocTemplate(
        buffer,
        pagesize=A4,
        rightMargin=85,
        leftMargin=85,
        topMargin=140,
        bottomMargin=40,
    )

    doc.build(elements)

    # Mesclando o conte√∫do din√¢mico com o template
    buffer.seek(0)
    overlay_pdf = PdfReader(buffer)

    # **Ajuste Importante:**
    # O n√∫mero de p√°ginas do template e o overlay_pdf deve ser gerenciado com cuidado.
    for index, template_page in enumerate(template_pdf.pages):
        if index < len(overlay_pdf.pages):
            overlay_page = overlay_pdf.pages[index]
            PageMerge(template_page).add(overlay_page).render()

    # Salvando o PDF final
    pdf_name = f"declaracao_desfiliacao_{associado.user.get_full_name().replace(' ', '_')}.pdf"
    pdf_path = os.path.join(settings.MEDIA_ROOT, 'documentos', pdf_name)
    os.makedirs(os.path.dirname(pdf_path), exist_ok=True)
    PdfWriter(pdf_path, trailer=template_pdf).write()

    # Preparando o redirecionamento
    pdf_url = f"{settings.MEDIA_URL}documentos/{pdf_name}"
    return redirect(f"{reverse('app_automacoes:pagina_acoes', args=[associado.id])}?pdf_url={pdf_url}")
# ======================================================================================================            

def gerar_direitos_deveres(request, associado_id):
    associado = AssociadoModel.objects.get(id=associado_id)
    associacao = associado.associacao

    # PDF base
    template_path = os.path.join(settings.MEDIA_ROOT, 'pdf/direitos_deveres.pdf')
    if not os.path.exists(template_path):
        return HttpResponse("O PDF base n√£o foi encontrado.", status=404)

    template_pdf = PdfReader(template_path)
    buffer = BytesIO()

    # Estilos
    styles = getSampleStyleSheet()
    style_normal = ParagraphStyle(
        'NormalJustified',
        parent=styles['Normal'],
        fontName='Times-Roman',
        fontSize=12,
        leading=16,
        alignment=4,  # Justificado
    )


    style_title = ParagraphStyle(
        'TitlePadrao',
        parent=styles['Title'],
        fontName='Times-Bold',
        fontSize=17,
        alignment=1,
        leading=32,
        spaceBefore=20,  # Usual nas p√°ginas seguintes
    )

    style_assinatura = ParagraphStyle(
        'Signature',
        parent=styles['Normal'],
        fontName='Times-Roman',
        fontSize=12,
        alignment=1,  # Centralizado
    )

    data_atual = datetime.now().strftime('%d/%m/%Y')
    local_data = f"{associado.reparticao.municipio_sede}, {data_atual}."
    assinatura = (
        "____________________________________________________________________<br/>"
        f"<strong>{associado.user.get_full_name()}</strong><br/>"
        f"CPF: {associado.cpf}<br/>"
    )

    # Dividindo em 3 partes (como textos)
    texto1 = (
        f"<strong>REGRAMENTO INTERNO ‚Äì DIREITOS, DEVERES E COMPROMISSOS ASSOCIATIVOS</strong><br/><br/>"
        f"<strong>Seja muito bem-vindo(a) √† Associa√ß√£o dos Pescadores e Agricultores ‚Äì APAPESC!</strong><br/><br/>"
        f"Sua participa√ß√£o √© fundamental para o fortalecimento da nossa comunidade. Ao se unir √† APAPESC, "
        f"voc√™ passa a fazer parte de um grupo que acredita no desenvolvimento sustent√°vel, na coopera√ß√£o entre os associados "
        f"e no protagonismo da pesca e da agricultura familiar.<br/><br/>"
        f"A coletividade √© o nosso alicerce. Trabalhamos juntos para garantir dignidade, reconhecimento e apoio real aos trabalhadores do mar e do campo.<br/><br/>"
        f"<strong>O Que Fazemos por Voc√™</strong><br/>"
        f"‚úÖ <strong>Defesa dos Interesses Coletivos:</strong> Buscamos pol√≠ticas p√∫blicas e solu√ß√µes pr√°ticas que beneficiem pescadores e agricultores, "
        f"como incentivos, acesso a cr√©dito, regulariza√ß√£o de documentos e infraestrutura adequada.<br/>"
        f"‚úÖ <strong>Assist√™ncia Junto a √ìrg√£os Governamentais:</strong> Ajudamos na emiss√£o de documentos obrigat√≥rios (RGP, TIE, CAEPF, licen√ßas e registros), "
        f"intermedia√ß√£o com o MAPA, Receita Federal, Marinha, INSS e outros √≥rg√£os.<br/>"
        f"‚úÖ <strong>Suporte Jur√≠dico e Administrativo:</strong> Oferecemos apoio em processos como o Seguro Defeso, regulariza√ß√£o previdenci√°ria, impugna√ß√µes, peti√ß√µes e orienta√ß√µes jur√≠dicas especializadas.<br/>"
        f"‚úÖ <strong>Fortalecimento da Classe:</strong> A uni√£o dos associados √© nossa for√ßa. Quanto mais organizados estivermos, maior ser√° nossa representatividade diante das autoridades e dos desafios cotidianos."
    )


    texto2 = (
        f"<strong>Direitos dos Associados</strong><br/>"
        f"‚Ä¢ Receber orienta√ß√µes e assist√™ncia t√©cnica nos processos de regulariza√ß√£o.<br/>"
        f"‚Ä¢ Ter acesso ao suporte jur√≠dico, institucional e documental disponibilizado pela Associa√ß√£o.<br/>"
        f"‚Ä¢ Participar de campanhas, projetos e iniciativas promovidas pela APAPESC.<br/>"
        f"‚Ä¢ Ter seus interesses coletivos representados em √≥rg√£os p√∫blicos e espa√ßos de decis√£o.<br/>"
        f"‚Ä¢ Ser tratado com respeito, aten√ß√£o e igualdade.<br/><br/>"

        f"<strong>Deveres e Regramentos Internos</strong><br/>"
        f"üîπ <strong>Cordialidade e Respeito:</strong> Zelar pela boa conviv√™ncia entre os membros. Condutas ofensivas, desrespeitosas ou de cunho discriminat√≥rio n√£o s√£o adequadas e podem gerar consequ√™ncias a ser deliberadas pela administra√ß√£o da APAPESC.<br/>"
        f"üîπ <strong>Documentos em Boa Qualidade:</strong> √â responsabilidade do associado entregar documentos solicitados em bom estado, coloridos e leg√≠veis, preferencialmente escaneados em papelaria.<br/>"
        f"üîπ <strong>Comunica√ß√£o Oficial e Grupos da APAPESC:</strong> Os associados devem permanecer nos grupos oficiais de WhatsApp:<br/>"
        f"&nbsp;&nbsp;&nbsp;&nbsp;‚Ä¢ Grupo Administrativo da APAPESC (obrigat√≥rio)<br/>"
        f"&nbsp;&nbsp;&nbsp;&nbsp;‚Ä¢ Grupo Fam√≠lia APAPESC (opcional)<br/>"
        f"&nbsp;&nbsp;&nbsp;&nbsp;‚Ä¢ Grupo de Envio de Fotos (opcional)<br/><br/>"
        f"üìµ √â proibida a divulga√ß√£o de conte√∫dos ofensivos ou que possam ferir a integridade de outros membros.<br/>"
        f"üîê Jamais compartilhe seus dados pessoais ou senhas com terceiros desconhecidos.<br/><br/>"
        f"üîπ <strong>Participa√ß√£o Ativa:</strong> Os associados devem participar, sempre que poss√≠vel e dentro das suas condi√ß√µes, das reuni√µes, eventos, mutir√µes e a√ß√µes promovidas pela associa√ß√£o.<br/>"
        f"üîπ <strong>Atualiza√ß√£o Cadastral:</strong> √â dever do associado manter seus dados e documentos atualizados, comunicar mudan√ßa de endere√ßo, celular e realizar recadastramento quando solicitado."
    )


    texto3 = (
        f"<strong>Anuidade Associativa</strong><br/>"
        f"üîπ <strong>Exerc√≠cio e Vencimento:</strong> A anuidade vigora entre 1¬∫ de janeiro e 31 de dezembro de cada ano. "
        f"Preferencialmente, ela deve ser paga na data de filia√ß√£o. No entanto, isso n√£o √© um obst√°culo! Sempre podem ser concedidos prazos e condi√ß√µes especiais, mediante conversa com a administra√ß√£o.<br/><br/>"
        f"üîπ <strong>Anuidade do Ano Atual:</strong> Pode ser paga a qualquer momento dentro do exerc√≠cio.<br/>"
        f"üîπ <strong>Anuidade Atrasada (Exerc√≠cios Anteriores):</strong> Caso a anuidade de anos anteriores n√£o tenha sido quitada, ela ser√° considerada em atraso. Neste caso, ser√° aplicada a mesma tarifa vigente do ano atual. Exemplo: se a anuidade de 2024 (R$230,00) n√£o for paga at√© 31/12/2024, em 2025 o valor cobrado ser√° o da anuidade atual.<br/><br/>"
        f"üîπ <strong>Regulariza√ß√£o e Notifica√ß√µes:</strong> Associados com anuidades em aberto poder√£o ser notificados para apresentar comprovante de pagamento ou negociar condi√ß√µes de regulariza√ß√£o diretamente com a administra√ß√£o. Casos espec√≠ficos ser√£o analisados individualmente, com aten√ß√£o √†s possibilidades de cada associado.<br/><br/>"

        f"<strong>Compromisso Coletivo</strong><br/>"
        f"Na APAPESC, buscamos o fortalecimento da pesca artesanal e da agricultura familiar de forma organizada, legal e sustent√°vel.<br/>"
        f"Nossa miss√£o √© cuidar de quem vive da pesca e do campo, com justi√ßa, respeito e dignidade.<br/><br/>"
        f"üíô Conte conosco. Crescemos juntos.<br/><br/>"
        f"APAPESC ‚Äì Por uma pesca legal, sustent√°vel e valorizada.<br/><br/>"
        f"{local_data}<br/><br/>"
        f"{assinatura}"
    )


    # Criando o conte√∫do
    from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, PageBreak
    doc = SimpleDocTemplate(
        buffer,
        pagesize=A4,
        rightMargin=85,
        leftMargin=85,
        topMargin=60,  # ‚¨ÖÔ∏è Margem superior reduzida
        bottomMargin=50,
    )

    elements = [
        Spacer(1, 120),  # Primeira p√°gina mais abaixo
        Paragraph("REGRAMENTO INTERNO - DIREITOS E DEVERES", style_title),
        Spacer(1, 12),
        Paragraph(texto1, style_normal),

        PageBreak(),
        Spacer(1, 60),  # ‚¨ÖÔ∏è Espa√ßo no topo da segunda p√°gina
        Paragraph("REGRAMENTO INTERNO - DIREITOS E DEVERES", style_title),
        Spacer(1, 12),
        Paragraph(texto2, style_normal),

        PageBreak(),
        Spacer(1, 60),  # ‚¨ÖÔ∏è Espa√ßo no topo da terceira p√°gina
        Paragraph("REGRAMENTO INTERNO - DIREITOS E DEVERES", style_title),
        Spacer(1, 12),
        Paragraph(texto3, style_normal),
    ]



    # Gera o PDF em mem√≥ria
    doc.build(elements)
    buffer.seek(0)
    overlay_pdf = PdfReader(buffer)

    # Mescla o conte√∫do com o template base
    for i, template_page in enumerate(template_pdf.pages):
        if i < len(overlay_pdf.pages):
            PageMerge(template_page).add(overlay_pdf.pages[i]).render()

    # Salva o resultado final
    pdf_name = f"direitos_deveres_{associado.user.get_full_name().replace(' ', '_')}.pdf"
    pdf_path = os.path.join(settings.MEDIA_ROOT, 'documentos', pdf_name)
    os.makedirs(os.path.dirname(pdf_path), exist_ok=True)
    PdfWriter(pdf_path, trailer=template_pdf).write()

    pdf_url = f"{settings.MEDIA_URL}documentos/{pdf_name}"
    return redirect(f"{reverse('app_automacoes:pagina_acoes', args=[associado.id])}?pdf_url={pdf_url}")
# ----------------------------------------------------------------------------------------------------

# Retirada de Documentos


def gerar_retirada_documentos(request, associado_id):
    associado = get_object_or_404(AssociadoModel, id=associado_id)
    associacao = associado.associacao
    # üìÑ Template base da declara√ß√£o
    template_path = os.path.join(settings.MEDIA_ROOT, 'pdf', 'retirada_documentos.pdf')
    if not os.path.exists(template_path):
        return HttpResponse("O PDF base para retirada de documentos n√£o foi encontrado.", status=404)

    template_pdf = PdfReader(template_path)
    buffer = BytesIO()

    # üé® Estilos
    styles = getSampleStyleSheet()
    style_title = ParagraphStyle(
        'Title',
        parent=styles['Title'],
        fontName='Times-Bold',
        fontSize=17,
        alignment=1,
        leading=28,
        spaceBefore=30,
    )
    style_normal = ParagraphStyle(
        'Normal',
        parent=styles['Normal'],
        fontName='Times-Roman',
        fontSize=12,
        leading=16,
        alignment=4,
    )
    style_assinatura = ParagraphStyle(
        'Assinatura',
        parent=styles['Normal'],
        fontName='Times-Roman',
        fontSize=12,
        alignment=1,
    )
    style_presidente = ParagraphStyle(
        'Presidente',
        parent=styles['Normal'],
        fontName='Times-Bold',
        fontSize=12,
        alignment=2,
        leading=16,
        spaceBefore=10,
        textColor=colors.grey,
    )
    nome_presidente = associacao.presidente.user.get_full_name()    

    # üìÖ Data atual
    data_atual = datetime.now().strftime('%d/%m/%Y')

    # ‚úçÔ∏è Conte√∫do
    paragrafo_inicial = (
        f"<strong>{associado.user.get_full_name()}</strong>, CPF: {associado.cpf}, RG: {associado.rg_numero}, "
        f"residente em {associado.logradouro}, {associado.numero} - {associado.bairro}, "
        f"{associado.municipio}/{associado.uf}, vem por meio desta declarar que retirei os seguintes documentos:"
    )

    lista_documentos = (
        "<br/><br/>"
        "[ ] LICEN√áA<br/>"
        "[ ] RG<br/>"
        "[ ] CPF<br/>"
        "[ ] RGP<br/>"
        "[ ] Carteirinha da APAPESC<br/>"
        "[ ] TIE<br/>"
        "[ ] Seguro DPEM<br/><br/>"
        "[ ] _____________________________________________<br/>"
        "[ ] _____________________________________________<br/>"
        "[ ] _____________________________________________<br/><br/>"
    )

    aviso = (
        "<strong>Declaro estar ciente</strong> de que a retirada dos documentos acima mencionados √© de minha total responsabilidade, "
        "assumindo a guarda e conserva√ß√£o dos mesmos. Estou ciente de que a APAPESC n√£o se responsabiliza pela perda, dano ou extravio "
        "dos documentos ap√≥s esta retirada."
    )

    local_data = f"{associado.reparticao.municipio_sede}, {data_atual}"
    assinatura = (
        "____________________________________________________________________<br/>"
        f"<strong>{associado.user.get_full_name()}</strong><br/>"
        f"CPF: {associado.cpf}<br/>"
    )

    # üìÑ Elementos a renderizar
    elements = [
        Spacer(1, 50),
        Paragraph(nome_presidente, style_presidente),
        Paragraph("DECLARA√á√ÉO DE RETIRADA DE DOCUMENTOS", style_title),
        Spacer(1, 10),
        Paragraph(paragrafo_inicial, style_normal),
        Spacer(1, 12),
        Paragraph(lista_documentos, style_normal),
        Spacer(1, 8),
        Paragraph(aviso, style_normal),
        Spacer(1, 24),
        Paragraph(local_data, style_normal),
        Spacer(1, 30),
        Paragraph(assinatura, style_assinatura),
    ]

    # üìÑ Criando PDF overlay
    doc = SimpleDocTemplate(
        buffer,
        pagesize=A4,
        leftMargin=85,
        rightMargin=85,
        topMargin=115,
        bottomMargin=40,
    )
    doc.build(elements)

    # üìé Mesclando com o template
    buffer.seek(0)
    overlay_pdf = PdfReader(buffer)

    for idx, template_page in enumerate(template_pdf.pages):
        if idx < len(overlay_pdf.pages):
            PageMerge(template_page).add(overlay_pdf.pages[idx]).render()

    # üíæ Salvando o PDF final
    pdf_name = f"retirada_documentos_{associado.user.get_full_name().replace(' ', '_')}.pdf"
    pdf_path = os.path.join(settings.MEDIA_ROOT, 'documentos', pdf_name)
    os.makedirs(os.path.dirname(pdf_path), exist_ok=True)
    PdfWriter(pdf_path, trailer=template_pdf).write()

    # üîó Redireciona com link para download
    pdf_url = f"{settings.MEDIA_URL}documentos/{pdf_name}"
    return redirect(f"{reverse('app_automacoes:pagina_acoes', args=[associado.id])}?pdf_url={pdf_url}")
