from django.shortcuts import render, redirect
from django.http import HttpResponse
from django.views.generic import TemplateView
from accounts.mixins import GroupPermissionRequiredMixin
from django.contrib.auth.mixins import LoginRequiredMixin
from django.shortcuts import get_object_or_404
from pdfrw import PdfReader, PdfWriter, PageMerge
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib import colors
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Frame
from io import BytesIO
from datetime import datetime
import os
from django.conf import settings
from django.urls import reverse
from urllib.parse import urlencode
from django.contrib.staticfiles import finders
from reportlab.lib.colors import lightgrey, grey
from reportlab.platypus import Table, TableStyle
from reportlab.pdfgen import canvas
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.lib.enums import TA_CENTER, TA_JUSTIFY
from reportlab.lib.colors import Color
from pdfrw.buildxobj import pagexobj

from app_finances.models import AnuidadeAssociado, AnuidadeModel
from app_associados.models import AssociadoModel
from app_associacao.models import AssociacaoModel
from django.contrib import messages
from app_finances.models import EntradaFinanceira

from .models import (
    DeclaracaoResidenciaModel,
    DeclaracaoFiliacaoModel,
    DeclaracaoAtividadePesqueiraModel,
    DeclaracaoHipossuficienciaModel,
    ProcuracaoJuridicaModel,
    ReciboAnuidadeModel,
    ReciboServicoExtraModel,
    CarteirinhaAssociadoModel,
    CobrancaAnuidadeModel,
    )

# Deletes
# Mapeamento de automa√ß√µes para modelos
MODELO_MAP = {
    'residencia': DeclaracaoResidenciaModel,
    'filiacao': DeclaracaoFiliacaoModel,
    'atividade_pesqueira': DeclaracaoAtividadePesqueiraModel,
    'hipossuficiencia': DeclaracaoHipossuficienciaModel,
    'procuracao_juridica': ProcuracaoJuridicaModel,
    'recibos_anuidades': ReciboAnuidadeModel,
    'recibos_servicos_extra': ReciboServicoExtraModel,
    'carteirinha_apapesc': CarteirinhaAssociadoModel,
    'cobranca_anuidades': CobrancaAnuidadeModel,

}

def delete_pdf(request, automacao, declaracao_id):
    if request.method == "POST":
        # Obter o modelo correspondente pelo tipo de automa√ß√£o
        modelo = MODELO_MAP.get(automacao)
        if not modelo:
            messages.error(request, "Tipo de automa√ß√£o inv√°lido.")
            return redirect('app_automacoes:lista_automacoes')

        # Obter a declara√ß√£o pelo ID
        declaracao = get_object_or_404(modelo, id=declaracao_id)
        
        # Excluir o arquivo do sistema de arquivos
        if declaracao.pdf_base:
            declaracao.pdf_base.delete()  # Remove o arquivo do sistema

        # Excluir o registro do banco de dados
        declaracao.delete()
        messages.success(request, f"{automacao.replace('_', ' ').capitalize()} exclu√≠do(a) com sucesso!")

    return redirect('app_automacoes:lista_automacoes')



# UPLOAD DE MODELOS PDF BASE
def upload_pdf_base(request, automacao):
    modelo_map = {
        'residencia': DeclaracaoResidenciaModel,
        'filiacao': DeclaracaoFiliacaoModel,
        'atividade_pesqueira': DeclaracaoAtividadePesqueiraModel,
        'hipossuficiencia': DeclaracaoHipossuficienciaModel,
        'procuracao_juridica': ProcuracaoJuridicaModel,
        'recibos_anuidades': ReciboAnuidadeModel,
        'recibos_servicos_extra': ReciboServicoExtraModel,
        'carteirinha_apapesc': CarteirinhaAssociadoModel,
        'cobranca_anuidades': CobrancaAnuidadeModel,
    }
    
    modelo = modelo_map.get(automacao)
    if not modelo:
        return HttpResponse("Automa√ß√£o inv√°lida.", status=400)

    if request.method == "POST":
        pdf_base = request.FILES.get('pdf_base')
        if not pdf_base:
            return HttpResponse("Arquivo PDF n√£o enviado.", status=400)

        # Tenta pegar a primeira inst√¢ncia existente; se n√£o houver, cria nova
        instancia = modelo.objects.first()
        if not instancia:
            instancia = modelo()

        # Atribui o novo arquivo e salva
        instancia.pdf_base = pdf_base
        instancia.save()

        return redirect('app_automacoes:lista_automacoes')  # Ajuste conforme sua url de destino

    # Para requisi√ß√µes GET, exibe o template com formul√°rio de upload
    return render(request, 'app_automacoes/upload_pdf_base.html', {'automacao': automacao})




class ListaTodosArquivosView(LoginRequiredMixin, GroupPermissionRequiredMixin, TemplateView):
    template_name = 'app_automacoes/list_automacoes.html'
    group_required = ['Superuser','Admin da Associa√ß√£o']

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        
        # Adicione cada queryset com nome separado
        context['declaracoes_residencia'] = DeclaracaoResidenciaModel.objects.all()
        context['declaracoes_filiacao'] = DeclaracaoFiliacaoModel.objects.all()
        context['declaracoes_atividade_pesqueira'] = DeclaracaoAtividadePesqueiraModel.objects.all()
        context['declaracoes_hipossuficiencia'] = DeclaracaoHipossuficienciaModel.objects.all()
        context['procuracoes_procuracao_juridica'] = ProcuracaoJuridicaModel.objects.all()
        context['recibos_anuidades'] = ReciboAnuidadeModel.objects.all()
        context['recibos_servicos_extra'] = ReciboServicoExtraModel.objects.all()
        context['carteirinha_apapesc'] = CarteirinhaAssociadoModel.objects.all()
        context['cobranca_anuidades'] = CobrancaAnuidadeModel.objects.all()
        
        return context


# Automa√ß√µes

# P√ÅGINA DE A√á√ïES -  AS A√á√ïES GERAR EST√ÉO V√çNCULADAS NESSA P√ÅGINA
def pagina_acoes(request, associado_id=None, entrada_id=None):
    pdf_url = request.GET.get('pdf_url')
    tipo_recibo = request.GET.get('tipo', 'documento')  # üëâ valor padr√£o agora √© "documento"

    associado = None
    entrada = None
    extra_associado = None

    if associado_id:
        associado = get_object_or_404(AssociadoModel, pk=associado_id)

    if entrada_id:
        entrada = get_object_or_404(EntradaFinanceira, pk=entrada_id)
        if hasattr(entrada, 'entrada_servico_extra'):
            extra_associado = entrada.entrada_servico_extra.extra_associado

    associacao = AssociacaoModel.objects.first()
    if not associacao:
        return HttpResponse("Informa√ß√µes da APAPESC n√£o est√£o configuradas.", status=404)

    return render(request, 'app_automacoes/pagina_acoes.html', {
        'pdf_url': pdf_url,
        'tipo_recibo': tipo_recibo,
        'associado': associado,
        'entrada': entrada,
        'extra_associado': extra_associado,
        'associacao': associacao,
    })

    
#=======================================================================================================

# GERAR DECLARA√á√ÉO DE FILIADO
def gerar_declaracao_filiado(request, associado_id):
    associado = AssociadoModel.objects.get(id=associado_id)
    associacao = associado.associacao

    # Caminho para o PDF de template
    template_path = os.path.join(settings.MEDIA_ROOT, 'pdf/declaracao_filiacao.pdf')
    if not os.path.exists(template_path):
        return HttpResponse("O PDF base para a Declara√ß√£o de Filia√ß√£o n√£o foi encontrado.", status=404)

    template_pdf = PdfReader(template_path)
    template_page = template_pdf.pages[0]  # Primeira p√°gina como template

    # Buffer para gerar o PDF dinamicamente
    buffer = BytesIO()

    # Estilos personalizados
    styles = getSampleStyleSheet()
    style_title = ParagraphStyle(
        'Title',
            parent=styles['Title'],
            fontName='Times-Bold',
            fontSize=11,
            alignment=2,
            leading=32,  # Define a altura da linha
            spaceBefore=100,  # Espa√ßamento antes do par√°grafo
            textColor=lightgrey,
    )

    style_normal = ParagraphStyle(
        'Normal',
        parent=styles['Normal'],
        fontName='Times-Roman',
        fontSize=12,
        leading=22,  # Espa√ßamento entre as linhas
        alignment=4
    )

    style_veracidade = ParagraphStyle(
        'Normal',
        parent=styles['Normal'],
        fontName='Times-Roman',
        fontSize=12,
        leading=18,  # Espa√ßamento entre as linhas
        alignment=4,
        leftIndent=50,  # Indenta o texto para a direita
    )

    style_data = ParagraphStyle(
        'Normal',
        parent=styles['Normal'],
        fontName='Times-Roman',
        fontSize=12,
        leading=18,  # Espa√ßamento entre as linhas
        spaceBefore=10,
        alignment=4
    )

    style_assinatura = ParagraphStyle(
        'Normal',
        parent=styles['Normal'],
        fontName='Times-Roman',
        fontSize=12,
        leading=18,  # Espa√ßamento entre as linhas
        alignment=4
    )
    style_presidente = ParagraphStyle(
        'Title',
            parent=styles['Title'],
            fontName='Times-Bold',
            fontSize=12,
            alignment=2,
            leading=32,  # Define a altura da linha
            spaceBefore=100,  # Espa√ßamento antes do par√°grafo
            textColor=grey,
    )
    nome_presidente = ( f"{associacao.presidente.user.get_full_name()}")

    # Data atual
    data_atual = datetime.now().strftime('%d/%m/%Y')

    # Texto da declara√ß√£o
    texto = (
        f"A {associacao.nome_fantasia}, {associacao.razao_social}, "
        f"inscrita no CNPJ sob o n¬∫ {associacao.cnpj}, com sede √† {associacao.logradouro}, n¬∞ {associacao.numero}, "
        f"{associacao.complemento}, {associacao.bairro}, {associacao.municipio} - {associacao.uf}, CEP: {associacao.cep}, "
        f"declara para os devidos fins que <strong>{associado.user.get_full_name()},</strong> inscrito no CPF sob o n¬∫ {associado.cpf}, "
        f"e no RG n¬∫ {associado.rg_numero} - {associado.rg_orgao}, √© filiado(a) a esta entidade desde, "
        f"{associado.data_filiacao.strftime('%d/%m/%Y')}."
    )

    local_data = f"{associacao.municipio}, {data_atual}."

    assinatura = (
        '_________________________________________________________________________<br/>'
        f"{associacao.administrador.user.get_full_name().upper()}<br/>"
        f"PROCURADOR(A) {associacao.nome_fantasia}<br/>"
        f"{associacao.razao_social}"
        f"<br/>Presidente: {associacao.presidente.user.get_full_name().upper()}"
    )

    declaracao_veracidade = (
        "<strong>Declaro sob as penas de lei (Art. 299 do C√≥digo Penal) a veracidade das informa√ß√µes "
        "aqui prestadas para emiss√£o desta declara√ß√£o, ficando sob minha responsabilidade as "
        "informa√ß√µes nelas contidas e eventuais informa√ß√µes n√£o declaradas.</strong>"
    )

    # Cria√ß√£o do Frame para controlar margens e posicionamento
    pdf_canvas = Frame(x1=75, y1=75, width=450, height=700, showBoundary=1)

    # Adiciona o t√≠tulo, texto, local e assinatura ao Frame
    elements = [
        Paragraph(nome_presidente, style_presidente),
        Spacer(1, 90),
                
        Paragraph(texto, style_normal),
        Spacer(1, 14),

        Paragraph(declaracao_veracidade, style_veracidade),
        Spacer(1, 18),

        Paragraph(local_data, style_data),
        Spacer(1, 24),

        Paragraph(assinatura, style_assinatura),
        Spacer(1, 16),

    ]

    # Gerando o conte√∫do din√¢mico
    doc = SimpleDocTemplate(buffer, pagesize=A4, rightMargin=68, leftMargin=68, topMargin=172, bottomMargin=50)
    doc.build(elements)

    # Mesclando o conte√∫do din√¢mico com o template
    buffer.seek(0)
    overlay_pdf = PdfReader(buffer)
    overlay_page = overlay_pdf.pages[0]

    merger = PageMerge(template_page)
    merger.add(overlay_page).render()

    # Salvando o PDF mesclado no sistema de arquivos
    pdf_name = f"declaracao_filiado_{associado_id}_{associado.user.get_full_name().replace(' ', '_')}.pdf"
    pdf_path = os.path.join(settings.MEDIA_ROOT, 'documentos', pdf_name)
    os.makedirs(os.path.dirname(pdf_path), exist_ok=True)

    PdfWriter(pdf_path, trailer=template_pdf).write()

    # Redirecionando para a p√°gina de a√ß√µes com o URL do PDF
    pdf_url = f"{settings.MEDIA_URL}documentos/{pdf_name}"
    query_string = urlencode({'pdf_url': pdf_url})
    redirect_url = f"{reverse('app_automacoes:pagina_acoes', args=[associado.id])}?{query_string}"
    return redirect(redirect_url)
#=======================================================================================================


# GERAR DECLARA√á√ÉO DE ATIVIDADE PESQUEIRA
def gerar_declaracao_atividade_pesqueira(request, associado_id):
    associado = AssociadoModel.objects.get(id=associado_id)
    associacao = associado.associacao
    
    # Caminho para o PDF de template
    template_path = os.path.join(settings.MEDIA_ROOT, 'pdf/declaracao_atividade_pesqueira.pdf')
    if not os.path.exists(template_path):
        return HttpResponse("O PDF base para a Declara√ß√£o de Atv. Pesqueira n√£o foi encontrado.", status=404)

    template_pdf = PdfReader(template_path)
    template_page = template_pdf.pages[0]  # Primeira p√°gina como template

    # Buffer para gerar o PDF dinamicamente
    buffer = BytesIO()

    # Estilos personalizados
    styles = getSampleStyleSheet()
    style_title = ParagraphStyle(
        'Title',
        parent=styles['Title'],
        fontName='Times-Bold',
        fontSize=11,
        alignment=2,
        leading=32,  # Espa√ßamento entre as linhas do t√≠tulo
        spaceBefore=100,  # Espa√ßamento antes do t√≠tulo
        textColor=colors.grey,
    )

    style_normal = ParagraphStyle(
        'Normal',
        parent=styles['Normal'],
        fontName='Times-Roman',
        fontSize=12,
        leading=15,  # Espa√ßamento entre as linhas do texto
        alignment=4,  # Justificado
    )
    style_presidente = ParagraphStyle(
        'Title',
            parent=styles['Title'],
            fontName='Times-Bold',
            fontSize=12,
            alignment=2,
            leading=32,  # Define a altura da linha
            spaceBefore=100,  # Espa√ßamento antes do par√°grafo
            textColor=grey,
    )
    nome_presidente = ( f"{associacao.presidente.user.get_full_name()}")
    # Data atual
    data_atual = datetime.now().strftime('%d/%m/%Y')

    # Texto inicial da declara√ß√£o
    texto = (
        f"A {associacao.razao_social}, "
        f"inscrita no CNPJ sob n¬∞ {associacao.cnpj}, com sede na {associacao.logradouro}, n¬∞ {associacao.numero}, "
        f"{associacao.complemento}, {associacao.bairro}, {associacao.municipio} - {associacao.uf}, CEP: {associacao.cep}, "
        f"representada neste ato por seu presidente, {associacao.presidente.user.get_full_name()}, "
        f"{associacao.presidente.profissao}, {associacao.presidente.estado_civil}, portador " 
        f"da carteira de identidade n¬∞ {associacao.presidente.rg_numero} - {associacao.presidente.rg_orgao}, inscrito no CPF " 
        f"sob n¬∞ {associacao.presidente.cpf}, Residente e domiciliado √† {associacao.presidente.logradouro}, " 
        f"n¬∞ {associacao.presidente.numero}, {associacao.presidente.complemento}, {associacao.presidente.bairro}, " 
        f"{associacao.presidente.municipio}, {associacao.presidente.uf}, CEP {associacao.presidente.cep}, " 
        f"declara que o Sr(a). <strong>{associado.user.get_full_name()},</strong> "
        f"inscrito no CPF sob o n¬∫ <strong>{associado.cpf}</strong>, √© pescador registrado no Minist√©rio da Agricultura, "
        f"Pesca e Abastecimento (MAPA), sob o n¬∫ <strong>{associado.rgp}</strong>, √© residente e domiciliado(a) na {associado.logradouro}, "
        f"n¬∫ {associado.numero}, {associado.complemento}, {associado.bairro}, {associado.municipio}, {associado.uf}, CEP: {associado.cep}, "
        f"dedica-se √† pesca artesanal profissional, com meios de produ√ß√£o pr√≥prios ou em regime de parceria com outros "
        f"pescadores artesanais e que sua renda depende de sua produ√ß√£o."
    )

    local_data = f"FLORIAN√ìPOLIS, {data_atual}."

    # Dados para a tabela
    dados_tabela = [
        ["ESP√âCIE", "QUANTIDADE M√âDIA ANUAL (Kg)"],  # Cabe√ßalho da tabela
        [associado.especie1, associado.quantidade1],
        [associado.especie2, associado.quantidade2],
        [associado.especie3, associado.quantidade3],
        [associado.especie4, associado.quantidade4],
        [associado.especie5, associado.quantidade5],
    ]

    # Cria√ß√£o da tabela
    tabela = Table(dados_tabela, colWidths=[200, 200])
    tabela.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Times-Bold'),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
    ]))

    assinatura = (
        "Por ser verdade, firmo e dou F√©.<br/><br/>"
        "__________________________________________________________________________<br/>"
        f"Jur√≠dico {associacao.administrador.user.get_full_name()} | {associacao.administrador.oab} <br/>"        
        f"Presidente da Associa√ß√£o: {associacao.presidente.user.get_full_name()}"

    )

    # Elementos para o PDF
    elements = [
        Paragraph(nome_presidente, style_presidente),
        Spacer(1, 100),
        Paragraph(texto, style_normal),
        Spacer(1, 17),
        tabela,  # Adicionando a tabela ao PDF
        Spacer(1, 15),
        Paragraph(local_data, style_normal),
        Spacer(1, 10),
        Paragraph(assinatura, style_normal),
    ]

    # Gerando o conte√∫do din√¢mico
    doc = SimpleDocTemplate(buffer, pagesize=A4, rightMargin=50, leftMargin=50, topMargin=172, bottomMargin=50)
    doc.build(elements)

    # Mesclando o conte√∫do din√¢mico com o template
    buffer.seek(0)
    overlay_pdf = PdfReader(buffer)
    overlay_page = overlay_pdf.pages[0]

    merger = PageMerge(template_page)
    merger.add(overlay_page).render()

    # Salvando o PDF no disco
    pdf_name = f"declaracao_atividade_pesqueira_{associado_id}_{associado.user.get_full_name().replace(' ', '_')}.pdf"
    pdf_path = os.path.join(settings.MEDIA_ROOT, 'documentos', pdf_name)
    os.makedirs(os.path.dirname(pdf_path), exist_ok=True)

    PdfWriter(pdf_path, trailer=template_pdf).write()

    # Redirecionando para a p√°gina de a√ß√µes
    pdf_url = f"{settings.MEDIA_URL}documentos/{pdf_name}"
    query_string = urlencode({'pdf_url': pdf_url})
    redirect_url = f"{reverse('app_automacoes:pagina_acoes', args=[associado.id])}?{query_string}"
    return redirect(redirect_url)


#=======================================================================================================


# GERAR DECLARA√á√ÉO DE RESID√äNCIA
def gerar_declaracao_residencia(request, associado_id):
    associado = AssociadoModel.objects.get(id=associado_id)
    associacao = associado.associacao
        
    # Caminho para o PDF de template
    template_path = os.path.join(settings.MEDIA_ROOT, 'pdf/declaracao_residencia.pdf')
    if not os.path.exists(template_path):
        return HttpResponse("O PDF base para a Declara√ß√£o de Resid√™ncia n√£o foi encontrado.", status=404)

    template_pdf = PdfReader(template_path)
    template_page = template_pdf.pages[0]  # Primeira p√°gina como template

    # Buffer em mem√≥ria para o conte√∫do din√¢mico
    buffer = BytesIO()

    # Definindo estilos personalizados
    styles = getSampleStyleSheet()
    style_title = ParagraphStyle(
        'Title',
        parent=styles['Title'],
        fontName='Times-Bold',
        fontSize=16,
        alignment=1,  # Centralizado
        leading=32,  # Espa√ßamento entre as linhas do t√≠tulo
        spaceBefore=100,  # Espa√ßamento antes do t√≠tulo
        textColor=colors.grey,
    )
    style_normal = ParagraphStyle(
        'Normal',
        parent=styles['Normal'],
        fontName='Times-Roman',
        fontSize=12,
        leading=28,  # Espa√ßamento entre linhas
        alignment=4,  # Justificado
    )
    style_assinatura = ParagraphStyle(
        'Normal',
        parent=styles['Normal'],
        fontName='Times-Roman',
        fontSize=12,
        leading=28,  # Espa√ßamento entre linhas
        alignment=1,  # Centralizado
    )
    style_data = ParagraphStyle(
        'Normal',
        parent=styles['Normal'],
        fontName='Times-Roman',
        fontSize=12,
        leading=28,  # Espa√ßamento entre linhas
        alignment=0,  # Esquerda
        spaceBefore=20,  # Espa√ßamento antes do t√≠tulo
    )
    # Data atual
    data_atual = datetime.now().strftime('%d/%m/%Y')

    # Texto da declara√ß√£o
    texto = (
        f"Eu, <strong>{associado.user.get_full_name()}</strong>, inscrito no CPF n¬∫ {associado.cpf}, na falta de documentos "
        f"para comprova√ß√£o de resid√™ncia, em conformidade com o disposto na Lei 7.115, de 29 de "
        f"agosto de 1983, DECLARO para os devidos fins, sob penas da Lei, que RESIDO no endere√ßo: "
        f"<strong>{associado.logradouro}, n¬∫ {associado.numero}, {associado.complemento},"
        f" {associado.bairro}, {associado.municipio} - {associado.uf}, CEP: {associado.cep}.</strong>"
    )

    # Declara√ß√£o de veracidade
    declaracao_veracidade = (
        "Declaro sob as penas da lei (Art. 299 do C√≥digo Penal) a veracidade das informa√ß√µes "
        "aqui prestadas para emiss√£o desta declara√ß√£o, ficando sob minha responsabilidade as "
        "informa√ß√µes nelas contidas e eventuais informa√ß√µes n√£o declaradas."
    )

    # Local e data
    local_data = f"FLORIAN√ìPOLIS, {data_atual}."

    # Assinatura
    assinatura = (
        "____________________________________________________________________<br/>"
        f"{associado.user.get_full_name()}  - CPF: {associado.cpf}<br/>"
    )

    # Elementos do PDF na ordem correta
    elements = [
        Paragraph("DECLARA√á√ÉO DE RESID√äNCIA", style_title),
        Spacer(1, 20),
        Paragraph(texto, style_normal),
        Spacer(1, 10),
        Paragraph(declaracao_veracidade, style_normal),
        Paragraph(local_data, style_data),
        Spacer(1, 24),
        Paragraph(assinatura, style_assinatura),
        Spacer(1, 26),
    ]

    # Cria√ß√£o do documento PDF
    doc = SimpleDocTemplate(
        buffer,
        pagesize=A4,
        rightMargin=85,
        leftMargin=85,
        topMargin=160,
        bottomMargin=40,
    )

    # Gerar o conte√∫do do PDF
    doc.build(elements)

    # Mesclar o conte√∫do din√¢mico com o template PDF
    buffer.seek(0)
    overlay_pdf = PdfReader(buffer)
    overlay_page = overlay_pdf.pages[0]

    merger = PageMerge(template_page)
    merger.add(overlay_page).render()

    # Salvar o PDF em disco
    pdf_name = f"declaracao_residencia_{associado.user.get_full_name().replace(' ', '_')}.pdf"
    pdf_path = os.path.join(settings.MEDIA_ROOT, 'documentos', pdf_name)
    os.makedirs(os.path.dirname(pdf_path), exist_ok=True)
    PdfWriter(pdf_path, trailer=template_pdf).write()

    # Construir o URL para o PDF
    pdf_url = f"{settings.MEDIA_URL}documentos/{pdf_name}"

    # Redirecionar para a p√°gina de a√ß√µes
    query_string = urlencode({'pdf_url': pdf_url})
    redirect_url = f"{reverse('app_automacoes:pagina_acoes', kwargs={'associado_id': associado.id})}?{query_string}"
    return redirect(redirect_url)
# =======================================================================================================


# DECLARA√á√ÉO DE HIPOSSUFICI√äNCIA
def gerar_declaracao_hipo(request, associado_id):
    associado = AssociadoModel.objects.get(id=associado_id)
    associacao = associado.associacao
    
    # Caminho para o PDF de template
    template_path = os.path.join(settings.MEDIA_ROOT, 'pdf/declaracao_hipossuficiencia.pdf')
    if not os.path.exists(template_path):
        return HttpResponse("O PDF base para a Declara√ß√£o de Atv. Pesqueira n√£o foi encontrado.", status=404)

    template_pdf = PdfReader(template_path)
    template_page = template_pdf.pages[0]  # Primeira p√°gina como template

    # Buffer em mem√≥ria para o conte√∫do din√¢mico
    buffer = BytesIO()

    # Definindo estilos personalizados
    styles = getSampleStyleSheet()
    style_title = ParagraphStyle(
        'Title',
        parent=styles['Title'],
        fontName='Times-Bold',
        fontSize=16,
        alignment=1,  # Centralizado
        leading=32,  # Espa√ßamento entre as linhas do t√≠tulo
        spaceBefore=100,  # Espa√ßamento antes do t√≠tulo
        textColor=colors.grey,
    )
    style_normal = ParagraphStyle(
        'Normal',
        parent=styles['Normal'],
        fontName='Times-Roman',
        fontSize=12,
        leading=22,  # Espa√ßamento entre linhas
        alignment=4,  # Justificado
    )
    style_assinatura = ParagraphStyle(
        'Normal',
        parent=styles['Normal'],
        fontName='Times-Roman',
        fontSize=12,
        leading=28,  # Espa√ßamento entre linhas
        alignment=1,  # Centralizado
    )
    style_data = ParagraphStyle(
        'Normal',
        parent=styles['Normal'],
        fontName='Times-Roman',
        fontSize=12,
        leading=28,  # Espa√ßamento entre linhas
        alignment=0,  # Esquerda
        spaceBefore=50,  # Espa√ßamento antes do t√≠tulo
    )
    style_veracidade = ParagraphStyle(
        'Normal',
        parent=styles['Normal'],
        fontName='Times-Roman',
        fontSize=12,
        leading=18,  # Espa√ßamento entre as linhas
        alignment=4,
        leftIndent=50,  # Indenta o texto para a direita
    )

    # Data atual
    data_atual = datetime.now().strftime('%d/%m/%Y')

    # Texto da declara√ß√£o
    texto = (
        f"Eu, <strong>{associado.user.get_full_name()}</strong>, profiss√£o {associado.profissao}, "
        f"estado civil {associado.estado_civil}, inscrito(a) no CPF n¬∫ {associado.cpf}, e RG: n¬∫{associado.rg_numero}, "
        f"com domic√≠lio e resid√™ncia estabelecido √† {associado.logradouro}, n¬∫ {associado.numero}, {associado.complemento}, {associado.bairro}, "
        f"{associado.municipio} - {associado.uf} {associado.cep}. <strong>DECLARO</strong>, para todos os fins de "
        f"direito e sob as penas da lei, que n√£o tenho condi√ß√µes de arcar com as despesas inerentes ao presente "
        f"processo, sem preju√≠zo do meu sustento e de minha fam√≠lia, necessitando, portanto, da "
        f"<strong>GRATUIDADE DA JUSTI√áA</strong>, nos termos do art. 98 e seguintes da Lei 13.105/2015 "
        f"(C√≥digo de Processo Civil). Requeiro, ainda, que o benef√≠cio abarque todos os atos do processo."
    )

    # Declara√ß√£o de veracidade
    declaracao_veracidade = (
        "<strong>Declaro sob as penas da lei (Art. 299 do C√≥digo Penal) a veracidade das informa√ß√µes "
        "aqui prestadas para emiss√£o desta declara√ß√£o, ficando sob minha responsabilidade as "
        "informa√ß√µes nelas contidas e eventuais informa√ß√µes n√£o declaradas.</strong>"
    )

    # Local e data
    local_data = f"{associado.reparticao.municipio_sede}, {data_atual}."

    # Assinatura
    assinatura = (
        "____________________________________________________________________<br/>"
        f"{associado.user.get_full_name()} - CPF: {associado.cpf}<br/>"
    )

    # Elementos do PDF na ordem correta
    elements = [
        Paragraph("DECLARA√á√ÉO DE HIPOSSUFICI√äNCIA", style_title),
        Spacer(1, 20),
        Paragraph(texto, style_normal),
        Spacer(1, 10),
        Paragraph(declaracao_veracidade, style_veracidade),
        Paragraph(local_data, style_data),
        Spacer(1, 14),
        Paragraph(assinatura, style_assinatura),
        Spacer(1, 26),
    ]

    # Cria√ß√£o do documento PDF
    doc = SimpleDocTemplate(
        buffer,
        pagesize=A4,
        rightMargin=85,
        leftMargin=85,
        topMargin=160,
        bottomMargin=40
    )

    # Gerar o conte√∫do do PDF
    doc.build(elements)

    # Mesclar o conte√∫do din√¢mico com o template PDF
    buffer.seek(0)
    overlay_pdf = PdfReader(buffer)
    overlay_page = overlay_pdf.pages[0]

    merger = PageMerge(template_page)
    merger.add(overlay_page).render()

    # Salvar o PDF no disco
    pdf_name = f"declaracao_hipo_{associado.user.get_full_name().replace(' ', '_')}.pdf"
    pdf_path = os.path.join(settings.MEDIA_ROOT, 'documentos', pdf_name)
    os.makedirs(os.path.dirname(pdf_path), exist_ok=True)
    PdfWriter(pdf_path, trailer=template_pdf).write()

    # Construir o URL do PDF
    pdf_url = f"{settings.MEDIA_URL}documentos/{pdf_name}"

    # Redirecionar para a p√°gina de a√ß√µes com o URL do PDF
    query_string = urlencode({'pdf_url': pdf_url})
    redirect_url = f"{reverse('app_automacoes:pagina_acoes', kwargs={'associado_id': associado.id})}?{query_string}"
    return redirect(redirect_url)


# GERAR PROCURA√á√ÉO AD JUDICIA
def gerar_procuracao_juridica(request, associado_id):
    associado = AssociadoModel.objects.get(id=associado_id)

    # Caminho para o PDF de template
    template_path = os.path.join(settings.MEDIA_ROOT, 'pdf/procuracao_juridica.pdf')
    if not os.path.exists(template_path):
        return HttpResponse("O PDF base para a Procura√ß√£o Jur√≠dica n√£o foi encontrado.", status=404)

    template_pdf = PdfReader(template_path)

    # Buffer em mem√≥ria para o conte√∫do din√¢mico
    buffer = BytesIO()

    # Definindo estilos personalizados
    styles = getSampleStyleSheet()
    style_title = ParagraphStyle(
        'Title',
        parent=styles['Title'],
        fontName='Times-Bold',
        fontSize=17,
        alignment=1,  # Centralizado
        leading=32,  # Espa√ßamento entre as linhas do t√≠tulo
        spaceBefore=100,  # Espa√ßamento antes do t√≠tulo
    )
    style_normal = ParagraphStyle(
        'Normal',
        parent=styles['Normal'],
        fontName='Times-Roman',
        fontSize=12,
        leading=14,  # Espa√ßamento entre linhas
        alignment=4,  # Justificado
    )
    style_assinatura = ParagraphStyle(
        'Normal',
        parent=styles['Normal'],
        fontName='Times-Roman',
        fontSize=12,
        leading=14,  # Espa√ßamento entre linhas
        alignment=1,  # Justificado
    )
    # Data atual
    data_atual = datetime.now().strftime('%d/%m/%Y')

    # Texto da declara√ß√£o
    texto1 = (
        f"<strong>OUTORGANTE(S)</strong>: <strong>{associado.user.get_full_name()}</strong>, brasileira, "
        f"profiss√£o, {associado.profissao}, estado civil, {associado.estado_civil}, CPF n¬∫ {associado.cpf}, "
        f"RG n¬∫ {associado.rg_numero}, com resid√™ncia e domic√≠lio estabelecido √° {associado.logradouro}, "
        f"n¬∫ {associado.numero}, {associado.complemento}, {associado.bairro}, {associado.municipio} -"
        f" {associado.uf} {associado.cep}. "
        f"<br /><br /><strong>OUTORGADOS</strong>: <strong>CRISTIANI JORDANI DOS SANTOS RAMOS</strong>, "
        f"brasileira, casada, advogada, inscri√ß√£o na OAB/SC sob o n√∫mero 51.410, inscrita no CPF 853.801.219-34, "
        f"<strong>SAMARA IZILDA CORREA DOS SANTOS</strong>,  brasileira, divorciada,"
        f"advogada, inscri√ß√£o na OAB/SC sob o n√∫mero 51.380, inscrita no CPF 027.034.419-59, integrantes do "
        f"escrit√≥rio JORDANI & SANTOS Advogados Associados."
    )
    texto2 =(
        f"<strong>PODERES:</strong> Nos termos do art. 105 do CPC para o foro em geral, conferindo-lhe os mais amplos"
        f" e ilimitados poderes inclusive os da cl√°usula ‚Äúad judicia et extra‚Äù, para, onde com esta se apresentar, "
        f"em conjunto ou separadamente, independente de ordem de nomea√ß√£o, propor a√ß√µes e contest√°-las, receber "
        f"cita√ß√µes, notifica√ß√µes e intima√ß√µes, apresentar justifica√ß√µes, variar de a√ß√µes e pedidos, notificar, "
        f"interpelar, protestar, discordar, transigir e desistir, receber a quantia e dar quita√ß√£o, arrematar "
        f"ou adjudicar em qualquer pra√ßa ou leil√£o, reter dos valores finais auferidos na demanda,  honor√°rios "
        f"contratuais de 30% e tamb√©m o valor equivalente a tr√™s benef√≠cios estabelecidos em senten√ßa, prestar "
        f"compromissos de inventariante, oferecer as primeiras e √∫ltimas declara√ß√µes, interpor quaisquer recursos, "
        f"requerer, assinar, praticar, perante qualquer reparti√ß√£o p√∫blica, entidades aut√°rquicas e ou parestatal, "
        f"Ju√≠zo, Inst√¢ncia ou Tribunal, tudo o que julgar conveniente ou necess√°rio ao bom e fiel desempenho deste "
        f"mandato, que poder√° ser substabelecido, no todo ou em parte, a quem melhor lhe convier, com ou sem reserva "
        f"de poderes, EM ESPECIAL PARA PROPOR A√á√ÉO JUDICIAL DE APOSENTADORIA BEM COMO, POR FOR√áA DO ARTIGO 661 DO "
        f"C√≥digo Civil, PRESTAR OU ASSINAR DECLARA√á√ÉO DE ISEN√á√ÉO DO IMPOSTO DE RENDA."
    )

    # Local e data
    local_data = f"{associado.reparticao.municipio_sede}, {data_atual}."
    assinatura = (
        "____________________________________________________________________<br/>"
        f"<strong>{associado.user.get_full_name()}</strong><br/>"
        f"CPF: {associado.cpf}<br/>"
    )

    # Elementos do PDF
    elements = [
        Paragraph("PROCURA√á√ÉO AD JUDICIA", style_title),
        Spacer(1, 10),
        Paragraph(texto1, style_normal),
        Spacer(1, 10),
        Paragraph(texto2, style_normal),
        Spacer(1, 10),
        Paragraph(local_data, style_normal),
        Spacer(1, 24),
        Paragraph(assinatura, style_assinatura),
    ]

    # Criando o documento PDF
    doc = SimpleDocTemplate(
        buffer,
        pagesize=A4,
        rightMargin=85,
        leftMargin=85,
        topMargin=140,
        bottomMargin=40,
    )

    doc.build(elements)

    # Mesclando o conte√∫do din√¢mico com o template
    buffer.seek(0)
    overlay_pdf = PdfReader(buffer)

    # **Ajuste Importante:**
    # O n√∫mero de p√°ginas do template e o overlay_pdf deve ser gerenciado com cuidado.
    for index, template_page in enumerate(template_pdf.pages):
        if index < len(overlay_pdf.pages):
            overlay_page = overlay_pdf.pages[index]
            PageMerge(template_page).add(overlay_page).render()

    # Salvando o PDF final
    pdf_name = f"procuracao_juridica_{associado.user.get_full_name().replace(' ', '_')}.pdf"
    pdf_path = os.path.join(settings.MEDIA_ROOT, 'documentos', pdf_name)
    os.makedirs(os.path.dirname(pdf_path), exist_ok=True)
    PdfWriter(pdf_path, trailer=template_pdf).write()

    # Preparando o redirecionamento
    pdf_url = f"{settings.MEDIA_URL}documentos/{pdf_name}"
    return redirect(f"{reverse('app_automacoes:pagina_acoes', args=[associado.id])}?pdf_url={pdf_url}")
# ======================================================================================================

# GERAR RECIBO DE ANUIDADE
def gerar_recibo_anuidade(request, anuidade_assoc_id):
    anuidade_assoc = get_object_or_404(AnuidadeAssociado, id=anuidade_assoc_id, pago=True)
    associado = anuidade_assoc.associado
    associacao = associado.associacao

    # Caminho para o PDF de template
    template_path = os.path.join(settings.MEDIA_ROOT, 'pdf/recibo_anuidade.pdf')
    if not os.path.exists(template_path):
        return HttpResponse("O PDF base para o Recibo de Anuidade n√£o foi encontrado.", status=404)

    template_pdf = PdfReader(template_path)

    # √öltimo pagamento registrado
    ultimo_pagamento = anuidade_assoc.pagamentos.last()
    if not ultimo_pagamento:
        return HttpResponse("Nenhum pagamento encontrado para gerar recibo.", status=404)

    buffer = BytesIO()
    data_pagamento = ultimo_pagamento.data_pagamento.strftime('%d/%m/%Y')
    data_hoje = datetime.now().strftime('%d/%m/%Y')

    # Estilos
    # Estilos personalizados
    styles = getSampleStyleSheet()
    style_title = ParagraphStyle(
        'Title',
        parent=styles['Title'],
        fontName='Times-Bold',
        fontSize=14,  # Levemente maior pra se destacar
        alignment=TA_CENTER,
        leading=28,
        spaceBefore=40,  # üîΩ Aumenta dist√¢ncia do topo
        textColor=colors.black,
    )

    style_normal = ParagraphStyle(
        'Normal',
        parent=styles['Normal'],
        fontName='Times-Roman',
        fontSize=12,
        leading=18,  # üîº Tamanho de linha mais compacto
        alignment=TA_JUSTIFY,
        spaceBefore=0,  # üîº remove espa√ßo extra antes do par√°grafo
    )


    style_assinatura = ParagraphStyle(
        'Assinatura',
        parent=styles['Normal'],
        fontName='Times-Roman',
        fontSize=12,
        leading=18,
        alignment=TA_CENTER,
        spaceBefore=10,
    )
    style_presidente = ParagraphStyle(
        'Presidente',
        parent=styles['Normal'],
        fontName='Times-Bold',
        fontSize=12,
        alignment=2,
        leading=16,
        spaceBefore=10,  # üîº Menos espa√ßo acima
        textColor=colors.grey,
    )
    nome_presidente = ( f"{associacao.presidente.user.get_full_name()}")

    # Data atual
    data_hoje = datetime.now().strftime('%d/%m/%Y')

    texto = (
        f"Recebemos de <strong>{associado.user.get_full_name()}</strong>, "
        f"inscrito no CPF sob o n¬∫ <strong>{associado.cpf}</strong>, "
        f"a import√¢ncia de <strong>R$ {anuidade_assoc.valor_pago:.2f}</strong> "
        f"(referente ao pagamento da anuidade - exerc√≠cio de <strong>{anuidade_assoc.anuidade.ano}</strong>), "
        f"pelo qual, registramos a confirma√ß√£o de pagamento em nosso sistema na data de <strong>{data_pagamento}</strong>. "
        f"<br/><br/>Este pagamento foi efetuado √† <strong>{associacao.razao_social}</strong>, "
        f"inscrita no CNPJ sob o n¬∫ {associacao.cnpj}, com sede na {associacao.logradouro}, n¬∫ {associacao.numero}, "
        f"{associacao.bairro}, {associacao.municipio or 'Munic√≠pio n√£o informado'}/{associacao.uf}. "
        f"<br/><br/><i>Aproveitamos para agradecer por sua confian√ßa, por fazer parte do nosso grupo de associados e por acreditar em nosso trabalho. "
        f"A contribui√ß√£o anual √© essencial para a manuten√ß√£o e fortalecimento das atividades da associa√ß√£o, refletindo diretamente no apoio prestado √† categoria.</i>"
    )


    assinatura = (
        f"{associacao.presidente.user.get_full_name()}<br/>"
        f"Presidente da Associa√ß√£o<br/>"
        f"Forte Abra√ßo!"
    )

    municipio = associacao.municipio.upper() if associacao.municipio else "CIDADE N√ÉO DEFINIDA"
    local_data = f"{municipio}, {data_hoje}."

    # Elementos do PDF
    elements = [
        Spacer(1, 50),
        Paragraph(nome_presidente, style_presidente),
        Spacer(1, 35),
        Paragraph("RECIBO DE PAGAMENTO DE ANUIDADE", style_title),
        Spacer(1, 20),
        Paragraph(texto, style_normal),
        Spacer(1, 24),
        Paragraph(local_data, style_normal),
        Spacer(1, 20),
        Paragraph(assinatura, style_assinatura),
    ]

    # Gera√ß√£o do PDF em mem√≥ria
    doc = SimpleDocTemplate(
        buffer,
        pagesize=A4,
        rightMargin=50,
        leftMargin=50,
        topMargin=120,
        bottomMargin=50,
    )
    doc.build(elements)
    buffer.seek(0)

    # Mesclando conte√∫do din√¢mico com o template
    overlay_pdf = PdfReader(buffer)

    for index, template_page in enumerate(template_pdf.pages):
        if index < len(overlay_pdf.pages):
            overlay_page = overlay_pdf.pages[index]
            PageMerge(template_page).add(overlay_page).render()

    # Salvando o PDF final
    pdf_name = f"recibo_anuidade_{associado.id}_{anuidade_assoc.anuidade.ano}.pdf"
    pdf_path = os.path.join(settings.MEDIA_ROOT, 'documentos', pdf_name)
    os.makedirs(os.path.dirname(pdf_path), exist_ok=True)
    PdfWriter(pdf_path, trailer=template_pdf).write()

    # Redireciona com link do PDF
    pdf_url = f"{settings.MEDIA_URL}documentos/{pdf_name}"
    query_string = urlencode({'pdf_url': pdf_url})
    #return redirect(f"{reverse('app_automacoes:pagina_acoes', args=[associado.id])}?{query_string}")
    return redirect(f"{reverse('app_automacoes:pagina_acoes', args=[associado.id])}?{query_string}&tipo=anuidade")



    # =======================================================================================================
# GERAR COBRAN√áA NUIDADE APAPESC ASSOCIADO
# app_automacoes/views.py
from decimal import Decimal

def gerar_cobranca_anuidade(request, anuidade_assoc_id):
    anuidade_assoc = get_object_or_404(AnuidadeAssociado, id=anuidade_assoc_id)
    associado = anuidade_assoc.associado
    associacao = associado.associacao

    # Caminho para o PDF base
    template_path = os.path.join(settings.MEDIA_ROOT, 'pdf/cobranca_anuidades.pdf')
    if not os.path.exists(template_path):
        return HttpResponse("O PDF base para a Cobran√ßa de Anuidade n√£o foi encontrado.", status=404)

    template_pdf = PdfReader(template_path)
    buffer = BytesIO()

    hoje = datetime.now()
    data_hoje = hoje.strftime('%d/%m/%Y')

    # üîé Pega todas as anuidades n√£o pagas de anos anteriores ao atual
    anuidades_em_aberto = AnuidadeAssociado.objects.filter(
        associado=associado,
        pago=False,
        anuidade__ano__lt=hoje.year
    ).select_related('anuidade')

    if not anuidades_em_aberto.exists():
        return HttpResponse("N√£o h√° anuidades em aberto para este associado.", status=404)

    # üî¢ Conta de quantas anuidades est√£o em aberto
    total_anuidades_em_aberto = anuidades_em_aberto.count()

    # üí∞ Valor atual da anuidade (do ano corrente)
    try:
        anuidade_atual = AnuidadeModel.objects.get(ano=hoje.year)
    except AnuidadeModel.DoesNotExist:
        return HttpResponse("Valor da anuidade atual n√£o encontrado.", status=404)

    valor_anuidade_atual = anuidade_atual.valor_anuidade
    valor_total_cobrado = valor_anuidade_atual * total_anuidades_em_aberto

    # üßæ Lista das anuidades em aberto com seus valores originais
    lista_anuidades = " - ".join([
        f"<strong>{a.anuidade.ano}</strong>: R$ {a.anuidade.valor_anuidade:.2f}"
        for a in anuidades_em_aberto
    ])


    # üìù Texto da carta
    texto = f"""
    <br/><br/>
    Prezado(a) <strong>{associado.user.get_full_name()}</strong>,<br/><br/>

    Realizamos uma an√°lise em nosso sistema e identificamos que, at√© o momento, n√£o localizamos o seu nome nas listagens de pagamentos das seguintes anuidades:

    {lista_anuidades}. Tamb√©m n√£o identificamos o envio de comprovantes de pagamento para os anos mencionados. Se os pagamentos j√° foram realizados, por gentileza, envie os comprovantes para que possamos atualizar sua situa√ß√£o.<br/><br/>

    Caso ainda n√£o tenha efetuado os pagamentos, o valor a ser considerado √© com base na anuidade vigente(atual) ({hoje.year}), que √© no valor de <strong>R$ {valor_anuidade_atual:.2f}</strong> por ano em aberto.

    Sendo assim, o valor total das anuidade(es) em aberto √© de: <strong>R$ {valor_total_cobrado:.2f}</strong>.<br/><br/>
    
    <strong>OBS:</strong> As anuidades computadas nesse documento s√£o de anos <font color='red'><strong>anteriores</strong></font> ao ano vigente (atual).<br/><br/>

    Entre em contato para verificar as formas de pagamento. <strong>Facilitamos para vo√ß√™!</strong> <br/><br/>

    <em>Agradecemos por sua aten√ß√£o. A sua contribui√ß√£o fortalece a associa√ß√£o e nos permite seguir prestando apoio e servi√ßos aos associados.</em>
    """

    assinatura = (
        f"{associacao.presidente.user.get_full_name()}<br/>"
        f"Presidente da Associa√ß√£o<br/>"
        f"APAPESC"
    )

    municipio = associacao.municipio.upper() if associacao.municipio else "CIDADE N√ÉO DEFINIDA"
    local_data = f"{municipio}, {data_hoje}."

    # Estilos PDF
    styles = getSampleStyleSheet()
    style_title = ParagraphStyle(
        'Title',
        parent=styles['Title'],
        fontName='Times-Bold',
        fontSize=14,
        alignment=TA_CENTER,
        leading=20,
        spaceBefore=27,
        textColor=colors.black,
    )
    style_normal = ParagraphStyle(
        'Normal',
        parent=styles['Normal'],
        fontName='Times-Roman',
        fontSize=12,
        leading=17,
        alignment=TA_JUSTIFY,
        spaceBefore=0,
    )
    style_assinatura = ParagraphStyle(
        'Assinatura',
        parent=styles['Normal'],
        fontName='Times-Roman',
        fontSize=12,
        leading=18,
        alignment=TA_CENTER,
        spaceBefore=10,
    )
    style_presidente = ParagraphStyle(
        'Presidente',
        parent=styles['Normal'],
        fontName='Times-Bold',
        fontSize=12,
        alignment=2,
        leading=16,
        spaceBefore=10,  # üîº Menos espa√ßo acima
        textColor=colors.grey,
    )
    nome_presidente = ( f"{associacao.presidente.user.get_full_name()}")
    # Gera conte√∫do do PDF
    elements = [
        Spacer(1, 61),
        Paragraph(nome_presidente, style_presidente),
        Spacer(1, 35),
        Paragraph("ANUIDADES EM ABERTO", style_title),
        Spacer(1, 1),
        Paragraph(texto, style_normal),
        Spacer(1, 7),
        Paragraph(local_data, style_normal),
        Spacer(1, 7),
        Paragraph(assinatura, style_assinatura),
    ]

    doc = SimpleDocTemplate(
        buffer,
        pagesize=A4,
        rightMargin=50,
        leftMargin=50,
        topMargin=100,
        bottomMargin=50,
    )
    doc.build(elements)
    buffer.seek(0)

    # Mescla com PDF base
    overlay_pdf = PdfReader(buffer)
    for i, page in enumerate(template_pdf.pages):
        if i < len(overlay_pdf.pages):
            PageMerge(page).add(overlay_pdf.pages[i]).render()

    # Salva PDF final
    pdf_name = f"cobranca_anuidades_{associado.id}_{hoje.year}.pdf"
    pdf_path = os.path.join(settings.MEDIA_ROOT, 'documentos', pdf_name)
    os.makedirs(os.path.dirname(pdf_path), exist_ok=True)
    PdfWriter(pdf_path, trailer=template_pdf).write()

    pdf_url = f"{settings.MEDIA_URL}documentos/{pdf_name}"
    query = urlencode({'pdf_url': pdf_url})
    return redirect(f"{reverse('app_automacoes:pagina_acoes', args=[associado.id])}?{query}&tipo=cobranca")
# -----------------------------------------------------------------------------------------------------------

# =======================================================================================================
# GERAR COBRAN√áA/NOTIFICA√á√ÉO EM LOTE
import zipfile
import re

def slugify_filename(nome):
    return re.sub(r'\W+', '_', nome.strip().lower())

def gerar_cobrancas_em_lote(request):
    hoje = datetime.now()
    ano_atual = hoje.year
    data_hoje = hoje.strftime('%d/%m/%Y')

    # Caminho do template base
    template_path = os.path.join(settings.MEDIA_ROOT, 'pdf/cobranca_anuidades.pdf')
    if not os.path.exists(template_path):
        return HttpResponse("Modelo base da cobran√ßa n√£o foi encontrado.", status=404)
    template_pdf = PdfReader(template_path)

    # Verifica se tem anuidade do ano atual
    try:
        anuidade_atual = AnuidadeModel.objects.get(ano=ano_atual)
    except AnuidadeModel.DoesNotExist:
        return HttpResponse("Valor da anuidade atual n√£o foi configurado.", status=404)

    valor_anuidade_atual = anuidade_atual.valor_anuidade

    # Diret√≥rio de sa√≠da
    output_dir = os.path.join(settings.MEDIA_ROOT, 'documentos', 'cobrancas_em_lote')
    os.makedirs(output_dir, exist_ok=True)

    arquivos_gerados = []

    for associado in AssociadoModel.objects.all():
        anuidades_em_aberto = AnuidadeAssociado.objects.filter(
            associado=associado,
            pago=False,
            anuidade__ano__lt=ano_atual
        ).select_related('anuidade')

        if not anuidades_em_aberto.exists():
            continue

        total_anuidades_em_aberto = anuidades_em_aberto.count()
        valor_total_cobrado = valor_anuidade_atual * total_anuidades_em_aberto

        lista_anuidades = " - ".join([
            f"<strong>{a.anuidade.ano}</strong>: R$ {a.anuidade.valor_anuidade:.2f}"
            for a in anuidades_em_aberto
        ])

        associacao = associado.associacao
        municipio = associacao.municipio.upper() if associacao.municipio else "CIDADE N√ÉO DEFINIDA"
        local_data = f"{municipio}, {data_hoje}."
        nome_presidente = associacao.presidente.user.get_full_name()
        assinatura = f"{nome_presidente}<br/>Presidente da Associa√ß√£o<br/>APAPESC"

        texto = f"""
        <br/><br/>
        Prezado(a) <strong>{associado.user.get_full_name()}</strong>,<br/><br/>

        Realizamos uma an√°lise em nosso sistema e identificamos que, at√© o momento, n√£o localizamos o seu nome nas listagens de pagamentos das seguintes anuidades:

        {lista_anuidades}. Tamb√©m n√£o identificamos o envio de comprovantes de pagamento para os anos mencionados. Se os pagamentos j√° foram realizados, por gentileza, envie os comprovantes para que possamos atualizar sua situa√ß√£o.<br/><br/>

        Caso ainda n√£o tenha efetuado os pagamentos, o valor a ser considerado √© com base na anuidade vigente(atual) ({ano_atual}), que √© no valor de <strong>R$ {valor_anuidade_atual:.2f}</strong> por ano em aberto.

        Sendo assim, o valor total das anuidade(es) em aberto √© de: <strong>R$ {valor_total_cobrado:.2f}</strong>.<br/><br/>

        <strong>OBS:</strong> As anuidades computadas nesse documento s√£o de anos <font color='red'><strong>anteriores</strong></font> ao ano vigente (atual).<br/><br/>

        Entre em contato para verificar as formas de pagamento. <strong>Facilitamos para vo√ß√™!</strong> <br/><br/>

        <em>Agradecemos por sua aten√ß√£o. A sua contribui√ß√£o fortalece a associa√ß√£o e nos permite seguir prestando apoio e servi√ßos aos associados.</em>
        """


        # Estilos PDF
        styles = getSampleStyleSheet()
        style_title = ParagraphStyle(
            'Title',
            parent=styles['Title'],
            fontName='Times-Bold',
            fontSize=14,
            alignment=TA_CENTER,
            leading=20,
            spaceBefore=27,
            textColor=colors.black,
        )
        style_normal = ParagraphStyle(
            'Normal',
            parent=styles['Normal'],
            fontName='Times-Roman',
            fontSize=12,
            leading=17,
            alignment=TA_JUSTIFY,
            spaceBefore=0,
        )
        style_assinatura = ParagraphStyle(
            'Assinatura',
            parent=styles['Normal'],
            fontName='Times-Roman',
            fontSize=12,
            leading=18,
            alignment=TA_CENTER,
            spaceBefore=10,
        )
        style_presidente = ParagraphStyle(
            'Presidente',
            parent=styles['Normal'],
            fontName='Times-Bold',
            fontSize=12,
            alignment=2,
            leading=16,
            spaceBefore=10,
            textColor=colors.grey,
        )

        # Cria PDF
        buffer = BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=A4, rightMargin=50, leftMargin=50, topMargin=100, bottomMargin=50)
        elements = [
            Spacer(1, 61),
            Paragraph(nome_presidente, style_presidente),
            Spacer(1, 35),
            Paragraph("ANUIDADES EM ABERTO", style_title),
            Spacer(1, 1),
            Paragraph(texto, style_normal),
            Spacer(1, 7),
            Paragraph(local_data, style_normal),
            Spacer(1, 7),
            Paragraph(assinatura, style_assinatura),
        ]
        doc.build(elements)
        buffer.seek(0)

        overlay_pdf = PdfReader(buffer)
        template_pdf = PdfReader(template_path)
        for i, page in enumerate(template_pdf.pages):
            if i < len(overlay_pdf.pages):
                PageMerge(page).add(overlay_pdf.pages[i]).render()

        nome_formatado = slugify_filename(associado.user.get_full_name())
        pdf_name = f"cobranca_{nome_formatado}_{ano_atual}.pdf"
        pdf_path = os.path.join(output_dir, pdf_name)
        PdfWriter(pdf_path, trailer=template_pdf).write()
        arquivos_gerados.append(pdf_path)

    # Cria o zip
    zip_path = os.path.join(settings.MEDIA_ROOT, 'documentos', f"cobrancas_anuidades_{ano_atual}.zip")
    with zipfile.ZipFile(zip_path, 'w') as zipf:
        for file in arquivos_gerados:
            zipf.write(file, os.path.basename(file))

    # Redireciona para download
    zip_url = f"{settings.MEDIA_URL}documentos/cobrancas_anuidades_{ano_atual}.zip"
    return redirect(zip_url)



# =======================================================================================================
# GERAR RECIBO DE ENTRADA EXTRA ASSOCIADO
# app_automacoes/views.py

def gerar_recibo_entrada_extra(request, entrada_id):
    entrada = get_object_or_404(EntradaFinanceira, id=entrada_id, status_pagamento='pago')

    servico = getattr(entrada, 'entrada_servico_extra', None)
    if not servico or not servico.extra_associado:
        return HttpResponse("Esta entrada n√£o est√° vinculada a um servi√ßo de extra associado.", status=400)

    extra = servico.extra_associado
    associacao = entrada.associacao

    # Caminho para o PDF de template
    template_path = os.path.join(settings.MEDIA_ROOT, 'pdf/recibo_servico_extra.pdf')
    if not os.path.exists(template_path):
        return HttpResponse("O PDF base para o Recibo de Entrada Extra n√£o foi encontrado.", status=404)

    template_pdf = PdfReader(template_path)
    buffer = BytesIO()
    data_hoje = datetime.now().strftime('%d/%m/%Y')

    # √öltimo pagamento
    pagamento = entrada.pagamentos.order_by('-data_pagamento').first()
    if not pagamento:
        return HttpResponse("Nenhum pagamento registrado para essa entrada.", status=400)

    data_pagamento = pagamento.data_pagamento.strftime('%d/%m/%Y')

    # Estilos
    styles = getSampleStyleSheet()
    style_title = ParagraphStyle(
        'Title',
        parent=styles['Title'],
        fontName='Times-Bold',
        fontSize=14,
        alignment=TA_CENTER,
        leading=28,
        spaceBefore=40,
        textColor=colors.black,
    )
    style_normal = ParagraphStyle(
        'Normal',
        parent=styles['Normal'],
        fontName='Times-Roman',
        fontSize=12,
        leading=18,
        alignment=TA_JUSTIFY,
        spaceBefore=0,
    )
    style_assinatura = ParagraphStyle(
        'Assinatura',
        parent=styles['Normal'],
        fontName='Times-Roman',
        fontSize=12,
        leading=18,
        alignment=TA_CENTER,
        spaceBefore=10,
    )
    style_presidente = ParagraphStyle(
        'Presidente',
        parent=styles['Normal'],
        fontName='Times-Bold',
        fontSize=12,
        alignment=2,
        leading=16,
        spaceBefore=10,
        textColor=colors.grey,
    )
    nome_presidente = associacao.presidente.user.get_full_name()

    municipio = associacao.municipio.upper() if associacao.municipio else "CIDADE N√ÉO DEFINIDA"
    local_data = f"{municipio}, {data_hoje}."

    # Texto
    texto = (
        f"Recebemos de <strong>{extra.nome_completo}</strong>, "
        f"inscrito no CPF sob o n¬∫ <strong>{extra.cpf}</strong>, "
        f"a import√¢ncia de <strong>R$ {entrada.valor_pagamento:.2f}</strong> "
        f"(referente ao servi√ßo de <strong>{entrada.tipo_servico.nome}</strong>), "
        f"pelo qual, registramos a confirma√ß√£o de pagamento na data de <strong>{data_pagamento}</strong>. "
        f"<br/><br/>Este pagamento foi efetuado √† <strong>{associacao.razao_social}</strong>, "
        f"inscrita no CNPJ sob o n¬∫ {associacao.cnpj}, com sede na {associacao.logradouro}, n¬∫ {associacao.numero}, "
        f"{associacao.bairro}, {associacao.municipio or 'Munic√≠pio n√£o informado'}/{associacao.uf}. "
        f"<br/><br/><i>Salientamos o nosso agradecimento pela contrata√ß√£o dos nossos servi√ßos e pela confia√ß√£o no nosso trabalho. "
        f" Estaremos sempre √† sua disposi√ß√£o! Conte Gente.</i>"
    )

    assinatura = (
        f"{nome_presidente}<br/>"
        f"Presidente da Associa√ß√£o"
    )

    # Elementos do PDF
    elements = [
        Spacer(1, 50),
        Paragraph(nome_presidente, style_presidente),
        Spacer(1, 35),
        Paragraph("RECIBO DE SERVI√áO PRESTADO", style_title),
        Spacer(1, 20),
        Paragraph(texto, style_normal),
        Spacer(1, 24),
        Paragraph(local_data, style_normal),
        Spacer(1, 20),
        Paragraph(assinatura, style_assinatura),
    ]

    doc = SimpleDocTemplate(
        buffer,
        pagesize=A4,
        rightMargin=50,
        leftMargin=50,
        topMargin=120,
        bottomMargin=50,
    )
    doc.build(elements)
    buffer.seek(0)

    overlay_pdf = PdfReader(buffer)
    for index, template_page in enumerate(template_pdf.pages):
        if index < len(overlay_pdf.pages):
            overlay_page = overlay_pdf.pages[index]
            PageMerge(template_page).add(overlay_page).render()

    pdf_name = f"recibo_servico_extra_{extra.id}_{entrada.id}.pdf"
    pdf_path = os.path.join(settings.MEDIA_ROOT, 'documentos', pdf_name)
    os.makedirs(os.path.dirname(pdf_path), exist_ok=True)
    PdfWriter(pdf_path, trailer=template_pdf).write()

    pdf_url = f"{settings.MEDIA_URL}documentos/{pdf_name}"
    query_string = urlencode({'pdf_url': pdf_url})
    return redirect(f"{reverse('app_automacoes:pagina_acoes_entrada', args=[entrada.id])}?{query_string}&tipo=servico_extra")



# =======================================================================================================
# GERAR CARTEIRINHA APAPESC ASSOCIADO
# app_automacoes/views.py

def gerar_carteirinha_apapesc(request, associado_id):
    associado = AssociadoModel.objects.get(id=associado_id)
    associacao = associado.associacao

    # Caminho para o PDF de template
    # Busca o modelo de carteirinha
    template_instance = CarteirinhaAssociadoModel.objects.first()
    if not template_instance or not template_instance.pdf_base:
        return HttpResponse("Modelo de carteirinha n√£o dispon√≠vel.", status=404)

    template_path = template_instance.pdf_base.path
    template_pdf = PdfReader(template_path)

    # Carrega o template

    buffer = BytesIO()


    # Inicia o canvas sobre buffer
    c = canvas.Canvas(buffer, pagesize=A4)
    c.setFont("Helvetica", 8)

    # Cor dourada clara
    dourado_claro = Color(218/255, 165/255, 32/255)
    c.setFillColor(dourado_claro)

    # Dados do associado
    nome = associado.user.get_full_name()
    profissao = associado.profissao or ''
    data_filiacao = associado.data_filiacao.strftime('%d/%m/%Y') if associado.data_filiacao else ''
    cpf = associado.cpf or ''
    rgp = associado.rgp or ''
    primeiro_registro = associado.primeiro_registro.strftime('%d/%m/%Y') if associado.primeiro_registro else ''
    municipio = associado.municipio_circunscricao or ''
    estado = associado.uf or ''

    # Deslocamento e posi√ß√µes ajustadas
    x_base = 25     # 2.5cm da esquerda
    y = 758         # Subiu 70 pontos

    # Renderiza as linhas
    c.drawString(x_base, y, f"{nome}")
    y -= 22
    c.drawString(x_base, y, f"{profissao}")
    c.drawString(x_base + 180, y, f"{data_filiacao}")
    y -= 23
    c.drawString(x_base, y, f"{cpf}")
    c.drawString(x_base + 80, y, f"{rgp}")
    c.drawString(x_base + 180, y, f"{primeiro_registro}")
    y -= 25
    c.drawString(x_base, y, f"{municipio}")
    c.drawString(x_base + 200, y, f"{estado}")
    y -= 20
        
    c.showPage()
    c.save()

    buffer.seek(0)
    overlay_pdf = PdfReader(buffer)

    # Mescla o conte√∫do gerado com o template
    for i, page in enumerate(template_pdf.pages):
        if i < len(overlay_pdf.pages):
            PageMerge(page).add(overlay_pdf.pages[i]).render()

    # Salvar arquivo final
    output_path = os.path.join(settings.MEDIA_ROOT, f'documentos/carteirinha_{associado.id}.pdf')
    os.makedirs(os.path.dirname(output_path), exist_ok=True)
    PdfWriter(output_path, trailer=template_pdf).write()

    # URL para acesso
    pdf_url = f"{settings.MEDIA_URL}documentos/carteirinha_{associado.id}.pdf"
    return redirect(f"{reverse('app_automacoes:pagina_acoes', args=[associado.id])}?pdf_url={pdf_url}")
    
